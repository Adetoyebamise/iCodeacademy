/**
 * In mathematics, the factorial of integer n is written as n!. It is equal to the product of n and every integer preceding it. For example: 5! = 1 x 2 x 3 x 4 x 5 = 120

Your mission is simple: write a function that takes an integer n and returns the value of n!.

You are guaranteed an integer argument. For any values outside the non-negative range, return null, nil or None (return an empty string "" in C and C++). For non-negative numbers a full length number is expected for example, return 25! =  "15511210043330985984000000"  as a string.

For more on factorials, see http://en.wikipedia.org/wiki/Factorial

NOTES:

The use of BigInteger or BigNumber functions has been disabled, this requires a complex solution

I have removed the use of require in the javascript language.
 */

function factorial(n) {
  var res = [1];
  for (var i = 2; i <= n; ++i) {
    var c = 0;
    for (var j = 0; j < res.length || c !== 0; ++j) {
      c += (res[j] || 0) * i;
      res[j] = c % 10;
      c = Math.floor(c / 10);
    }
  }
  return res.reverse().join("");
}

function factorial(n){
  console.log(n);
    let fs= ["1","1","2","6","24","120","720","5040","40320","362880","3628800","39916800","479001600",
    "6227020800","87178291200","1307674368000","20922789888000","355687428096000","6402373705728000",
    "121645100408832000","2432902008176640000","51090942171709440000","1124000727777607680000",
    "25852016738884976640000","620448401733239439360000","15511210043330985984000000","403291461126605635584000000",
    "10888869450418352160768000000","304888344611713860501504000000","8841761993739701954543616000000",
    "265252859812191058636308480000000","8222838654177922817725562880000000","263130836933693530167218012160000000",
    "8683317618811886495518194401280000000","295232799039604140847618609643520000000",
    "10333147966386144929666651337523200000000",
  "371993326789901217467999448150835200000000",
  "13763753091226345046315979581580902400000000",
  "523022617466601111760007224100074291200000000",
  "20397882081197443358640281739902897356800000000",
  "815915283247897734345611269596115894272000000000",
  "33452526613163807108170062053440751665152000000000",
  "1405006117752879898543142606244511569936384000000000",
  "60415263063373835637355132068513997507264512000000000",
  "2658271574788448768043625811014615890319638528000000000",
  "119622220865480194561963161495657715064383733760000000000",
  "5502622159812088949850305428800254892961651752960000000000",
  "258623241511168180642964355153611979969197632389120000000000",
  "12413915592536072670862289047373375038521486354677760000000000",
  "608281864034267560872252163321295376887552831379210240000000000",
  "30414093201713378043612608166064768844377641568960512000000000000",
  "1551118753287382280224243016469303211063259720016986112000000000000",
  "80658175170943878571660636856403766975289505440883277824000000000000",
  "4274883284060025564298013753389399649690343788366813724672000000000000",
  "230843697339241380472092742683027581083278564571807941132288000000000000",
  "12696403353658275925965100847566516959580321051449436762275840000000000000",
  "710998587804863451854045647463724949736497978881168458687447040000000000000",
  "40526919504877216755680601905432322134980384796226602145184481280000000000000",
  "2350561331282878571829474910515074683828862318181142924420699914240000000000000",
  "138683118545689835737939019720389406345902876772687432540821294940160000000000000",
  "8320987112741390144276341183223364380754172606361245952449277696409600000000000000",
  "507580213877224798800856812176625227226004528988036003099405939480985600000000000000",
  "31469973260387937525653122354950764088012280797258232192163168247821107200000000000000",
  "1982608315404440064116146708361898137544773690227268628106279599612729753600000000000000",
  "126886932185884164103433389335161480802865516174545192198801894375214704230400000000000000",
  "8247650592082470666723170306785496252186258551345437492922123134388955774976000000000000000",
  "544344939077443064003729240247842752644293064388798874532860126869671081148416000000000000000",
  "36471110918188685288249859096605464427167635314049524593701628500267962436943872000000000000000",
  "2480035542436830599600990418569171581047399201355367672371710738018221445712183296000000000000000",
  "171122452428141311372468338881272839092270544893520369393648040923257279754140647424000000000000000",
  "11978571669969891796072783721689098736458938142546425857555362864628009582789845319680000000000000000",
  "850478588567862317521167644239926010288584608120796235886430763388588680378079017697280000000000000000",
  "61234458376886086861524070385274672740778091784697328983823014963978384987221689274204160000000000000000",
  "4470115461512684340891257138125051110076800700282905015819080092370422104067183317016903680000000000000000",
  "330788544151938641225953028221253782145683251820934971170611926835411235700971565459250872320000000000000000",
  "24809140811395398091946477116594033660926243886570122837795894512655842677572867409443815424000000000000000000",
  "1885494701666050254987932260861146558230394535379329335672487982961844043495537923117729972224000000000000000000",
  "145183092028285869634070784086308284983740379224208358846781574688061991349156420080065207861248000000000000000000",
  "11324281178206297831457521158732046228731749579488251990048962825668835325234200766245086213177344000000000000000000",
  "894618213078297528685144171539831652069808216779571907213868063227837990693501860533361810841010176000000000000000000",
  "71569457046263802294811533723186532165584657342365752577109445058227039255480148842668944867280814080000000000000000000",
  "5797126020747367985879734231578109105412357244731625958745865049716390179693892056256184534249745940480000000000000000000",
  "475364333701284174842138206989404946643813294067993328617160934076743994734899148613007131808479167119360000000000000000000",
  "39455239697206586511897471180120610571436503407643446275224357528369751562996629334879591940103770870906880000000000000000000",
  "3314240134565353266999387579130131288000666286242049487118846032383059131291716864129885722968716753156177920000000000000000000",
  "281710411438055027694947944226061159480056634330574206405101912752560026159795933451040286452340924018275123200000000000000000000",
  "24227095383672732381765523203441259715284870552429381750838764496720162249742450276789464634901319465571660595200000000000000000000",
  "2107757298379527717213600518699389595229783738061356212322972511214654115727593174080683423236414793504734471782400000000000000000000",
  "185482642257398439114796845645546284380220968949399346684421580986889562184028199319100141244804501828416633516851200000000000000000000",
  "16507955160908461081216919262453619309839666236496541854913520707833171034378509739399912570787600662729080382999756800000000000000000000",
  "1485715964481761497309522733620825737885569961284688766942216863704985393094065876545992131370884059645617234469978112000000000000000000000",
  "135200152767840296255166568759495142147586866476906677791741734597153670771559994765685283954750449427751168336768008192000000000000000000000",
  "12438414054641307255475324325873553077577991715875414356840239582938137710983519518443046123837041347353107486982656753664000000000000000000000",
  "1156772507081641574759205162306240436214753229576413535186142281213246807121467315215203289516844845303838996289387078090752000000000000000000000",
  "108736615665674308027365285256786601004186803580182872307497374434045199869417927630229109214583415458560865651202385340530688000000000000000000000",
  "10329978488239059262599702099394727095397746340117372869212250571234293987594703124871765375385424468563282236864226607350415360000000000000000000000",
  "991677934870949689209571401541893801158183648651267795444376054838492222809091499987689476037000748982075094738965754305639874560000000000000000000000",
  "96192759682482119853328425949563698712343813919172976158104477319333745612481875498805879175589072651261284189679678167647067832320000000000000000000000",
  "9426890448883247745626185743057242473809693764078951663494238777294707070023223798882976159207729119823605850588608460429412647567360000000000000000000000",
  "933262154439441526816992388562667004907159682643816214685929638952175999932299156089414639761565182862536979208272237582511852109168640000000000000000000000",
  "93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000",
  "9425947759838359420851623124482936749562312794702543768327889353416977599316221476503087861591808346911623490003549599583369706302603264000000000000000000000000",
  "961446671503512660926865558697259548455355905059659464369444714048531715130254590603314961882364451384985595980362059157503710042865532928000000000000000000000000",
  "99029007164861804075467152545817733490901658221144924830052805546998766658416222832141441073883538492653516385977292093222882134415149891584000000000000000000000000",
  "10299016745145627623848583864765044283053772454999072182325491776887871732475287174542709871683888003235965704141638377695179741979175588724736000000000000000000000000",
  "1081396758240290900504101305800329649720646107774902579144176636573226531909905153326984536526808240339776398934872029657993872907813436816097280000000000000000000000000",
  "114628056373470835453434738414834942870388487424139673389282723476762012382449946252660360871841673476016298287096435143747350528228224302506311680000000000000000000000000",
  "12265202031961379393517517010387338887131568154382945052653251412013535324922144249034658613287059061933743916719318560380966506520420000368175349760000000000000000000000000",
  "1324641819451828974499891837121832599810209360673358065686551152497461815091591578895743130235002378688844343005686404521144382704205360039762937774080000000000000000000000000",
  "144385958320249358220488210246279753379312820313396029159834075622223337844983482099636001195615259277084033387619818092804737714758384244334160217374720000000000000000000000000",
  "15882455415227429404253703127090772871724410234473563207581748318444567162948183030959960131517678520479243672638179990208521148623422266876757623911219200000000000000000000000000",
  "1762952551090244663872161047107075788761409536026565516041574063347346955087248316436555574598462315773196047662837978913145847497199871623320096254145331200000000000000000000000000",
  "197450685722107402353682037275992488341277868034975337796656295094902858969771811440894224355027779366597957338237853638272334919686385621811850780464277094400000000000000000000000000",
  "22311927486598136465966070212187151182564399087952213171022161345724023063584214692821047352118139068425569179220877461124773845924561575264739138192463311667200000000000000000000000000",
  "2543559733472187557120132004189335234812341496026552301496526393412538629248600474981599398141467853800514886431180030568224218435400019580180261753940817530060800000000000000000000000000",
  "292509369349301569068815180481773552003419272043053514672100535242441942363589054622883930786268803187059211939585703515345785120071002251720730101703194015956992000000000000000000000000000",
  "33931086844518982011982560935885732032396635556994207701963662088123265314176330336254535971207181169698868584991941607780111073928236261199604691797570505851011072000000000000000000000000000",
  "3969937160808720895401959629498630647790406360168322301129748464310422041758630649341780708631240196854767624444057168110272995649603642560353748940315749184568295424000000000000000000000000000",
  "468452584975429065657431236280838416439267950499862031533310318788629800927518416622330123618486343228862579684398745837012213486653229822121742374957258403779058860032000000000000000000000000000",
  "55745857612076058813234317117419771556272886109483581752463927935846946310374691578057284710599874844234646982443450754604453404911734348832487342619913750049708004343808000000000000000000000000000",
  "6689502913449127057588118054090372586752746333138029810295671352301633557244962989366874165271984981308157637893214090552534408589408121859898481114389650005964960521256960000000000000000000000000000",
  "809429852527344373968162284544935082997082306309701607045776233628497660426640521713391773997910182738287074185078904956856663439318382745047716214841147650721760223072092160000000000000000000000000000",
  "98750442008336013624115798714482080125644041369783596059584700502676714572050143649033796427745042294071023050579626404736512939596842694895821378210620013388054747214795243520000000000000000000000000000",
  "12146304367025329675766243241881295855454217088483382315328918161829235892362167668831156960612640202170735835221294047782591091570411651472186029519906261646730733907419814952960000000000000000000000000000",
  "1506141741511140879795014161993280686076322918971939407100785852066825250652908790935063463115967385069171243567440461925041295354731044782551067660468376444194611004520057054167040000000000000000000000000000",
  "188267717688892609974376770249160085759540364871492425887598231508353156331613598866882932889495923133646405445930057740630161919341380597818883457558547055524326375565007131770880000000000000000000000000000000",
  "23721732428800468856771473051394170805702085973808045661837377170052497697783313457227249544076486314839447086187187275319400401837013955325179315652376928996065123321190898603130880000000000000000000000000000000",
  "3012660018457659544809977077527059692324164918673621799053346900596667207618480809067860692097713761984609779945772783965563851033300772326297773087851869982500270661791244122597621760000000000000000000000000000000",
  "385620482362580421735677065923463640617493109590223590278828403276373402575165543560686168588507361534030051833058916347592172932262498857766114955245039357760034644709279247692495585280000000000000000000000000000000",
  "49745042224772874403902341504126809639656611137138843145968864022652168932196355119328515747917449637889876686464600208839390308261862352651828829226610077151044469167497022952331930501120000000000000000000000000000000",
  "6466855489220473672507304395536485253155359447828049608975952322944781961185526165512707047229268452925683969240398027149120740074042105844737747799459310029635780991774612983803150965145600000000000000000000000000000000",
  "847158069087882051098456875815279568163352087665474498775849754305766436915303927682164623187034167333264599970492141556534816949699515865660644961729169613882287309922474300878212776434073600000000000000000000000000000000",
  "111824865119600430744996307607616902997562475571842633838412167568361169672820118454045730260688510087990927196104962685462595837360336094267205134948250389032461924909766607715924086489297715200000000000000000000000000000000",
  "14872707060906857289084508911813048098675809251055070300508818286592035566485075754388082124671571841702793317081960037166525246368924700537538282948117301741317436012998958826217903503076596121600000000000000000000000000000000",
  "1992942746161518876737324194182948445222558439641379420268181650403332765909000151088003004705990626788174304488982644980314383013435909872030129915047718433336536425741860482713199069412263880294400000000000000000000000000000000",
  "269047270731805048359538766214698040105045389351586221736204522804449923397715020396880405635308734616403531106012657072342441706813847832724067538531441988500432417475151165166281874370655623839744000000000000000000000000000000000",
  "36590428819525486576897272205198933454286172951815726156123815101405189582089242773975735166401987907830880230417721361838572072126683305250473185240276110436058808776620558462614334914409164842205184000000000000000000000000000000000",
  "5012888748274991661034926292112253883237205694398754483388962668892510972746226260034675717797072343372830591567227826571884373881355612819314826377917827129740056802397016509378163883274055583382110208000000000000000000000000000000000",
  "691778647261948849222819828311491035886734385827028118707676848307166514238979223884785249055995983385450621636277440066920043595627074569065446040152660143904127838730788278294186615891819670506731208704000000000000000000000000000000000",
  "96157231969410890041971956135297253988256079629956908500367081914696145479218112119985149618783441690577636407442564169301886059792163365100096999581219760002673769583579570682891939608962934200435638009856000000000000000000000000000000000",
  "13462012475717524605876073858941615558355851148193967190051391468057460367090535696797920946629681836680869097041958983702264048370902871114013579941370766400374327741701139895604871545254810788060989321379840000000000000000000000000000000000",
  "1898143759076170969428526414110767793728175011895349373797246196996101911759765533248506853474785138972002542682916216702019230820297304827075914771733278062452780211579860725280286887880928321116599494314557440000000000000000000000000000000000",
  "269536413788816277658850750803729026709400851689139611079208959973446471469886705721287973193419489734024361060974102771686730776482217285444779897586125484868294790044340222989800738079091821598557128192667156480000000000000000000000000000000000",
  "38543707171800727705215657364933250819444321791546964384326881276202845420193798918144180166658987031965483631719296696351202501036957071818603525354815944336166154976340651887541505545310130488593669331551403376640000000000000000000000000000000000",
  "5550293832739304789551054660550388117999982337982762871343070903773209740507907044212761943998894132603029642967578724274573160149321818341878907651093495984407926316593053871805976798524658790357488383743402086236160000000000000000000000000000000000",
  "804792605747199194484902925779806277109997439007500616344745281047115412373646521410850481879839649227439298230298915019813108221651663659572441609408556917739149315905992811411866635786075524601835815642793302504243200000000000000000000000000000000000",
  "117499720439091082394795827163851716458059626095095089986332811032878850206552392125984170354456588787206137541623641592892713800361142894297576474973649309989915800122274950466132528824767026591868029083847822165619507200000000000000000000000000000000000",
  "17272458904546389112034986593086202319334765035978978227990923221833190980363201642519673042105118551719302218618675314155228928653088005461743741821126448568517622617974417718521481737240752909004600275325629858346067558400000000000000000000000000000000000",
  "2556323917872865588581178015776757943261545225324888777742656636831312265093753843092911610231557545654456728355563946494973881440657024808338073789526714388140608147460213822341179297111631430532680840748193219035217998643200000000000000000000000000000000000",
  "380892263763056972698595524350736933545970238573408427883655838887865527498969322620843829924502074302514052524979028027751108334657896696442372994639480443832950613971571859528835715269633083149369445271480789636247481797836800000000000000000000000000000000000",
  "57133839564458545904789328652610540031895535786011264182548375833179829124845398393126574488675311145377107878746854204162666250198684504466355949195922066574942592095735778929325357290444962472405416790722118445437122269675520000000000000000000000000000000000000",
  "8627209774233240431623188626544191544816225903687700891564804750810154197851655157362112747789971982951943289690774984828562603780001360174419748328584232052816331406456102618328128950857189333333217935399039885261005462721003520000000000000000000000000000000000000",
  "1311335885683452545606724671234717114812066337360530535517850322123143438073451583919041137664075741408695380032997797693941515774560206746511801745944803272028082373781327597985875600530292778666649126180654062559672830333592535040000000000000000000000000000000000000",
  "200634390509568239477828874698911718566246149616161171934231099284840946025238092339613294062603588435530393145048663047173051913507711632216305667129554900620296603188543122491838966881134795135997316305640071571629943041039657861120000000000000000000000000000000000000",
  "30897696138473508879585646703632404659201907040888820477871589289865505687886666220300447285640952619071680544337494109264649994680187591361311072737951454695525676891035640863743200899694758450943586711068571022031011228320107310612480000000000000000000000000000000000000",
  "4789142901463393876335775239063022722176295591337767174070096339929153381622433264146569329274347655956110484372311586936020749175429076661003216274382475477806479918110524333880196139452687559896255940215628508414806740389616633144934400000000000000000000000000000000000000",
  "747106292628289444708380937293831544659502112248691679154935029028947927533099589206864815366798234329153235562080607562019236871366935959116501738803666174537810867225241796085310597754619259343815926673638047312709851500780194770609766400000000000000000000000000000000000000",
  "117295687942641442819215807155131552511541831623044593627324799557544824622696635505477776012587322789677057983246655387237020188804608945581290772992175589402436306154362961985393763847475223716979100487761173428095446685622490578985733324800000000000000000000000000000000000000",
  "18532718694937347965436097530510785296823609396441045793117318330092082290386068409865488609988797000768975161352971551183449189831128213401843942132763743125584936372389347993692214687901085347282697877066265401639080576328353511479745865318400000000000000000000000000000000000000",
  "2946702272495038326504339507351214862194953894034126281105653614484641084171384877168612688988218723122267050655122476638168421183149385930893186799109435156968004883209906330997062135376272570217948962453536198860613811636208208325279592585625600000000000000000000000000000000000000",
  "471472363599206132240694321176194377951192623045460204976904578317542573467421580346978030238114995699562728104819596262106947389303901748942909887857509625114880781313585012959529941660203611234871833992565791817698209861793313332044734813700096000000000000000000000000000000000000000",
  "75907050539472187290751785709367294850142012310319093001281637109124354328254874435863462868336514307629599224875954998199218529677928181579808491945059049643495805791487187086484320607292781408814365272803092482649411787748723446459202305005715456000000000000000000000000000000000000000",
  "12296942187394494341101789284917501765723005994271693066207625211678145401177289658609880984670515317835995074429904709708273401807824365415928975695099566042246320538220924308010459938381430588227927174194100982189204709615293198326390773410925903872000000000000000000000000000000000000000",
  "2004401576545302577599591653441552787812849977066285969791842909503537700391898214353410600501293996807267197132074467682448564494675371562796423038301229264886150247730010662205704969956173185881152129393638460096840367667292791327201696065980922331136000000000000000000000000000000000000000",
  "328721858553429622726333031164414657201307396238870899045862237158580182864271307153959338482212215476391820329660212699921564577126760936298613378281401599441328640627721748601735615072812402484508949220556707455881820297436017777661078154820871262306304000000000000000000000000000000000000000",
  "54239106661315887749844950142128418438215720379413698342567269131165730172604765680403290849565015553604650354393935095487058155225915554489271207416431263907819225703574088519286376487014046409943976621391856730220500349076942933314077895545443758280540160000000000000000000000000000000000000000",
  "9003691705778437366474261723593317460743809582982673924866166675773511208652391102946946281027792581898371958829393225850851653767501982045219020431127589808697991466793298694201538496844331704050700119151048217216603057946772526930136930660543663874569666560000000000000000000000000000000000000000",
  "1503616514864999040201201707840084015944216200358106545452649834854176371844949314192140028931641361177028117124508668717092226179172831001551576411998307498052564574954480881931656928973003394576466919898225052275172710677111011997332867420310791867053134315520000000000000000000000000000000000000000",
  "252607574497319838753801886917134114678628321660161899636045172255501630469951484784279524860515748677740723676917456344471493998101035608260664837215715659672830848592352788164518364067464570288846442542901808782229015393754650015551921726612213033664926565007360000000000000000000000000000000000000000",
  "42690680090047052749392518888995665380688186360567361038491634111179775549421800928543239701427161526538182301399050122215682485679075017796052357489455946484708413412107621199803603527401512378815048789750405684196703601544535852628274771797464002689372589486243840000000000000000000000000000000000000000",
  "7257415615307998967396728211129263114716991681296451376543577798900561843401706157852350749242617459511490991237838520776666022565442753025328900773207510902400430280058295603966612599658257104398558294257568966313439612262571094946806711205568880457193340212661452800000000000000000000000000000000000000000",
  '1241018070217667823424840524103103992616605577501693185388951803611996075221691752992751978120487585576464959501670387052809889858690710767331242032218484364310473577889968548278290754541561964852153468318044293239598173696899657235903947616152278558180061176365108428800000000000000000000000000000000000000000',
  "213455108077438865629072570145733886730056159330291227886899710221263324938130981514753340236723864719151973034287306573083301055694802251980973629541579310661401455397074590303866009781148657954570396550703618437210885875866741044575478989978191912006970522334798649753600000000000000000000000000000000000000000",
  "36927733697396923753829554635211962404299715564140382424433649868278555214296659802052327860953228596413291334931704037143411082635200789592708437910693220744422451783693904122568819692138717826140678603271725989637483256524946200711557865266227200777205900363920166407372800000000000000000000000000000000000000000",
  "6425425663347064733166342506526881458348150508160426541851455077080468607287618805557105047805861775775912692278116502462953528378524937389131268196460620409529506610362739317326974626432136901748478076969280322196922086635340638923811068556323532935233826663322108954882867200000000000000000000000000000000000000000",
  "1124449491085736328304109938642204255210926338928074644824004638489082006275333290972493383366025810760784721148670387931016867466241864043097971934380608571667663656813479380532220559625623957805983663469624056384461365161184611811666936997356618263665919666081369067104501760000000000000000000000000000000000000000000",
  "197903110431089593781523349201027948917123035651341137489024816374078433104458659211158835472420542693898110922165988275858968674058568071585243060450987108613508803599172370973670818494109816573853124770653833923665200268368491678853380911534764814405201861230320955810392309760000000000000000000000000000000000000000000",
  "35028850546302858099329632808581946958330777310287381335557392498211882659489182680375113878618436056819965633223379924827037455308366548670588021699824718224591058237053509662339734873457437533572003084405728604488740447501223027157048421341653372149720729437766809178439438827520000000000000000000000000000000000000000000",
  "6235135397241908741680674639927586558582878361231153877729215864681715113389074517106770270394081618113953882713761626619212667044889245663364667862568799843977208366195524719896472807475423880975816549024219691598995799655217698833954618998814300242650289839922492033762220111298560000000000000000000000000000000000000000000",
  "1116089236106301664760840760547037993986335226660376544113529639778027005296644338562111878400540609642397745005763331164839067401035174973742275547399815172071920297548998924861468632538100874694671162275335324796220248138283968091277876800787759743434401881346126074043437399922442240000000000000000000000000000000000000000000"]
    fs[200]="788657867364790503552363213932185062295135977687173263294742533244359449963403342920304284011984623904177212138919638830257642790242637105061926624952829931113462857270763317237396988943922445621451664240254033291864131227428294853277524242407573903240321257405579568660226031904170324062351700858796178922222789623703897374720000000000000000000000000000000000000000000000000";
    fs[250]="3232856260909107732320814552024368470994843717673780666747942427112823747555111209488817915371028199450928507353189432926730931712808990822791030279071281921676527240189264733218041186261006832925365133678939089569935713530175040513178760077247933065402339006164825552248819436572586057399222641254832982204849137721776650641276858807153128978777672951913990844377478702589172973255150283241787320658188482062478582659808848825548800000000000000000000000000000000000000000000000000000000000000";
  
    return n<0?null:fs[n]
  }

  function BigInt(n) {
    this.digits = Array.isArray(n) ? n : n.toString().split('').reverse().map(Number);
    
    this.mulInt = function(n) {
      var digits = this.digits;
      var result = [];
      var carry = 0;
      for(var i = 0; i < digits.length; i++) {
        var prod = carry + n * digits[i];
        var d = prod % 10;
        carry = (prod - d) / 10;
        result.push(d);
      }
      if (carry > 0)
        result.push.apply(result, carry.toString().split('').reverse().map(Number));
      return new BigInt(result);
    }
    
    this.toString = function() {
      return this.digits.reverse().join('');
    }
  }
  
  function factorial(n) {
    var result = new BigInt(1);
    for(var i = 1; i <= n; i++)
      result = result.mulInt(i);
    return result.toString();
  }

  let factorial = function (n) {
    return {
        0: "1",
        1: "1",
        2: "2",
        3: "6",
        4: "24",
        5: "120",
        6: "720",
        7: "5040",
        8: "40320",
        9: "362880",
        10: "3628800",
        11: "39916800",
        12: "479001600",
        13: "6227020800",
        14: "87178291200",
        15: "1307674368000",
        16: "20922789888000",
        17: "355687428096000",
        18: "6402373705728000",
        19: "121645100408832000",
        20: "2432902008176640000",
        21: "51090942171709440000",
        22: "1124000727777607680000",
        23: "25852016738884976640000",
        24: "620448401733239439360000",
        25: "15511210043330985984000000",
        26: "403291461126605635584000000",
        27: "10888869450418352160768000000",
        28: "304888344611713860501504000000",
        29: "8841761993739701954543616000000",
        30: "265252859812191058636308480000000",
        31: "8222838654177922817725562880000000",
        32: "263130836933693530167218012160000000",
        33: "8683317618811886495518194401280000000",
        34: "295232799039604140847618609643520000000",
        35: "10333147966386144929666651337523200000000",
        36: "371993326789901217467999448150835200000000",
        37: "13763753091226345046315979581580902400000000",
        38: "523022617466601111760007224100074291200000000",
        39: "20397882081197443358640281739902897356800000000",
        40: "815915283247897734345611269596115894272000000000",
        41: "33452526613163807108170062053440751665152000000000",
        42: "1405006117752879898543142606244511569936384000000000",
        43: "60415263063373835637355132068513997507264512000000000",
        44: "2658271574788448768043625811014615890319638528000000000",
        45: "119622220865480194561963161495657715064383733760000000000",
        46: "5502622159812088949850305428800254892961651752960000000000",
        47: "258623241511168180642964355153611979969197632389120000000000",
        48: "12413915592536072670862289047373375038521486354677760000000000",
        49: "608281864034267560872252163321295376887552831379210240000000000",
        50: "30414093201713378043612608166064768844377641568960512000000000000",
        51: "1551118753287382280224243016469303211063259720016986112000000000000",
        52: "80658175170943878571660636856403766975289505440883277824000000000000",
        53: "4274883284060025564298013753389399649690343788366813724672000000000000",
        54: "230843697339241380472092742683027581083278564571807941132288000000000000",
        55: "12696403353658275925965100847566516959580321051449436762275840000000000000",
        56: "710998587804863451854045647463724949736497978881168458687447040000000000000",
        57: "40526919504877216755680601905432322134980384796226602145184481280000000000000",
        58: "2350561331282878571829474910515074683828862318181142924420699914240000000000000",
        59: "138683118545689835737939019720389406345902876772687432540821294940160000000000000",
        60: "8320987112741390144276341183223364380754172606361245952449277696409600000000000000",
        61: "507580213877224798800856812176625227226004528988036003099405939480985600000000000000",
        62: "31469973260387937525653122354950764088012280797258232192163168247821107200000000000000",
        63: "1982608315404440064116146708361898137544773690227268628106279599612729753600000000000000",
        64: "126886932185884164103433389335161480802865516174545192198801894375214704230400000000000000",
        65: "8247650592082470666723170306785496252186258551345437492922123134388955774976000000000000000",
        66: "544344939077443064003729240247842752644293064388798874532860126869671081148416000000000000000",
        67: "36471110918188685288249859096605464427167635314049524593701628500267962436943872000000000000000",
        68: "2480035542436830599600990418569171581047399201355367672371710738018221445712183296000000000000000",
        69: "171122452428141311372468338881272839092270544893520369393648040923257279754140647424000000000000000",
        70: "11978571669969891796072783721689098736458938142546425857555362864628009582789845319680000000000000000",
        71: "850478588567862317521167644239926010288584608120796235886430763388588680378079017697280000000000000000",
        72: "61234458376886086861524070385274672740778091784697328983823014963978384987221689274204160000000000000000",
        73: "4470115461512684340891257138125051110076800700282905015819080092370422104067183317016903680000000000000000",
        74: "330788544151938641225953028221253782145683251820934971170611926835411235700971565459250872320000000000000000",
        75: "24809140811395398091946477116594033660926243886570122837795894512655842677572867409443815424000000000000000000",
        76: "1885494701666050254987932260861146558230394535379329335672487982961844043495537923117729972224000000000000000000",
        77: "145183092028285869634070784086308284983740379224208358846781574688061991349156420080065207861248000000000000000000",
        78: "11324281178206297831457521158732046228731749579488251990048962825668835325234200766245086213177344000000000000000000",
        79: "894618213078297528685144171539831652069808216779571907213868063227837990693501860533361810841010176000000000000000000",
        80: "71569457046263802294811533723186532165584657342365752577109445058227039255480148842668944867280814080000000000000000000",
        81: "5797126020747367985879734231578109105412357244731625958745865049716390179693892056256184534249745940480000000000000000000",
        82: "475364333701284174842138206989404946643813294067993328617160934076743994734899148613007131808479167119360000000000000000000",
        83: "39455239697206586511897471180120610571436503407643446275224357528369751562996629334879591940103770870906880000000000000000000",
        84: "3314240134565353266999387579130131288000666286242049487118846032383059131291716864129885722968716753156177920000000000000000000",
        85: "281710411438055027694947944226061159480056634330574206405101912752560026159795933451040286452340924018275123200000000000000000000",
        86: "24227095383672732381765523203441259715284870552429381750838764496720162249742450276789464634901319465571660595200000000000000000000",
        87: "2107757298379527717213600518699389595229783738061356212322972511214654115727593174080683423236414793504734471782400000000000000000000",
        88: "185482642257398439114796845645546284380220968949399346684421580986889562184028199319100141244804501828416633516851200000000000000000000",
        89: "16507955160908461081216919262453619309839666236496541854913520707833171034378509739399912570787600662729080382999756800000000000000000000",
        90: "1485715964481761497309522733620825737885569961284688766942216863704985393094065876545992131370884059645617234469978112000000000000000000000",
        91: "135200152767840296255166568759495142147586866476906677791741734597153670771559994765685283954750449427751168336768008192000000000000000000000",
        92: "12438414054641307255475324325873553077577991715875414356840239582938137710983519518443046123837041347353107486982656753664000000000000000000000",
        93: "1156772507081641574759205162306240436214753229576413535186142281213246807121467315215203289516844845303838996289387078090752000000000000000000000",
        94: "108736615665674308027365285256786601004186803580182872307497374434045199869417927630229109214583415458560865651202385340530688000000000000000000000",
        95: "10329978488239059262599702099394727095397746340117372869212250571234293987594703124871765375385424468563282236864226607350415360000000000000000000000",
        96: "991677934870949689209571401541893801158183648651267795444376054838492222809091499987689476037000748982075094738965754305639874560000000000000000000000",
        97: "96192759682482119853328425949563698712343813919172976158104477319333745612481875498805879175589072651261284189679678167647067832320000000000000000000000",
        98: "9426890448883247745626185743057242473809693764078951663494238777294707070023223798882976159207729119823605850588608460429412647567360000000000000000000000",
        99: "933262154439441526816992388562667004907159682643816214685929638952175999932299156089414639761565182862536979208272237582511852109168640000000000000000000000",
        100: "93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000",
        101: "9425947759838359420851623124482936749562312794702543768327889353416977599316221476503087861591808346911623490003549599583369706302603264000000000000000000000000",
        102: "961446671503512660926865558697259548455355905059659464369444714048531715130254590603314961882364451384985595980362059157503710042865532928000000000000000000000000",
        103: "99029007164861804075467152545817733490901658221144924830052805546998766658416222832141441073883538492653516385977292093222882134415149891584000000000000000000000000",
        104: "10299016745145627623848583864765044283053772454999072182325491776887871732475287174542709871683888003235965704141638377695179741979175588724736000000000000000000000000",
        105: "1081396758240290900504101305800329649720646107774902579144176636573226531909905153326984536526808240339776398934872029657993872907813436816097280000000000000000000000000",
        106: "114628056373470835453434738414834942870388487424139673389282723476762012382449946252660360871841673476016298287096435143747350528228224302506311680000000000000000000000000",
        107: "12265202031961379393517517010387338887131568154382945052653251412013535324922144249034658613287059061933743916719318560380966506520420000368175349760000000000000000000000000",
        108: "1324641819451828974499891837121832599810209360673358065686551152497461815091591578895743130235002378688844343005686404521144382704205360039762937774080000000000000000000000000",
        109: "144385958320249358220488210246279753379312820313396029159834075622223337844983482099636001195615259277084033387619818092804737714758384244334160217374720000000000000000000000000",
        110: "15882455415227429404253703127090772871724410234473563207581748318444567162948183030959960131517678520479243672638179990208521148623422266876757623911219200000000000000000000000000",
        111: "1762952551090244663872161047107075788761409536026565516041574063347346955087248316436555574598462315773196047662837978913145847497199871623320096254145331200000000000000000000000000",
        112: "197450685722107402353682037275992488341277868034975337796656295094902858969771811440894224355027779366597957338237853638272334919686385621811850780464277094400000000000000000000000000",
        113: "22311927486598136465966070212187151182564399087952213171022161345724023063584214692821047352118139068425569179220877461124773845924561575264739138192463311667200000000000000000000000000",
        114: "2543559733472187557120132004189335234812341496026552301496526393412538629248600474981599398141467853800514886431180030568224218435400019580180261753940817530060800000000000000000000000000",
        115: "292509369349301569068815180481773552003419272043053514672100535242441942363589054622883930786268803187059211939585703515345785120071002251720730101703194015956992000000000000000000000000000",
        116: "33931086844518982011982560935885732032396635556994207701963662088123265314176330336254535971207181169698868584991941607780111073928236261199604691797570505851011072000000000000000000000000000",
        117: "3969937160808720895401959629498630647790406360168322301129748464310422041758630649341780708631240196854767624444057168110272995649603642560353748940315749184568295424000000000000000000000000000",
        118: "468452584975429065657431236280838416439267950499862031533310318788629800927518416622330123618486343228862579684398745837012213486653229822121742374957258403779058860032000000000000000000000000000",
        119: "55745857612076058813234317117419771556272886109483581752463927935846946310374691578057284710599874844234646982443450754604453404911734348832487342619913750049708004343808000000000000000000000000000",
        120: "6689502913449127057588118054090372586752746333138029810295671352301633557244962989366874165271984981308157637893214090552534408589408121859898481114389650005964960521256960000000000000000000000000000",
        121: "809429852527344373968162284544935082997082306309701607045776233628497660426640521713391773997910182738287074185078904956856663439318382745047716214841147650721760223072092160000000000000000000000000000",
        122: "98750442008336013624115798714482080125644041369783596059584700502676714572050143649033796427745042294071023050579626404736512939596842694895821378210620013388054747214795243520000000000000000000000000000",
        123: "12146304367025329675766243241881295855454217088483382315328918161829235892362167668831156960612640202170735835221294047782591091570411651472186029519906261646730733907419814952960000000000000000000000000000",
        124: "1506141741511140879795014161993280686076322918971939407100785852066825250652908790935063463115967385069171243567440461925041295354731044782551067660468376444194611004520057054167040000000000000000000000000000",
        125: "188267717688892609974376770249160085759540364871492425887598231508353156331613598866882932889495923133646405445930057740630161919341380597818883457558547055524326375565007131770880000000000000000000000000000000",
        126: "23721732428800468856771473051394170805702085973808045661837377170052497697783313457227249544076486314839447086187187275319400401837013955325179315652376928996065123321190898603130880000000000000000000000000000000",
        127: "3012660018457659544809977077527059692324164918673621799053346900596667207618480809067860692097713761984609779945772783965563851033300772326297773087851869982500270661791244122597621760000000000000000000000000000000",
        128: "385620482362580421735677065923463640617493109590223590278828403276373402575165543560686168588507361534030051833058916347592172932262498857766114955245039357760034644709279247692495585280000000000000000000000000000000",
        129: "49745042224772874403902341504126809639656611137138843145968864022652168932196355119328515747917449637889876686464600208839390308261862352651828829226610077151044469167497022952331930501120000000000000000000000000000000",
        130: "6466855489220473672507304395536485253155359447828049608975952322944781961185526165512707047229268452925683969240398027149120740074042105844737747799459310029635780991774612983803150965145600000000000000000000000000000000",
        131: "847158069087882051098456875815279568163352087665474498775849754305766436915303927682164623187034167333264599970492141556534816949699515865660644961729169613882287309922474300878212776434073600000000000000000000000000000000",
        132: "111824865119600430744996307607616902997562475571842633838412167568361169672820118454045730260688510087990927196104962685462595837360336094267205134948250389032461924909766607715924086489297715200000000000000000000000000000000",
        133: "14872707060906857289084508911813048098675809251055070300508818286592035566485075754388082124671571841702793317081960037166525246368924700537538282948117301741317436012998958826217903503076596121600000000000000000000000000000000",
        134: "1992942746161518876737324194182948445222558439641379420268181650403332765909000151088003004705990626788174304488982644980314383013435909872030129915047718433336536425741860482713199069412263880294400000000000000000000000000000000",
        135: "269047270731805048359538766214698040105045389351586221736204522804449923397715020396880405635308734616403531106012657072342441706813847832724067538531441988500432417475151165166281874370655623839744000000000000000000000000000000000",
        136: "36590428819525486576897272205198933454286172951815726156123815101405189582089242773975735166401987907830880230417721361838572072126683305250473185240276110436058808776620558462614334914409164842205184000000000000000000000000000000000",
        137: "5012888748274991661034926292112253883237205694398754483388962668892510972746226260034675717797072343372830591567227826571884373881355612819314826377917827129740056802397016509378163883274055583382110208000000000000000000000000000000000",
        138: "691778647261948849222819828311491035886734385827028118707676848307166514238979223884785249055995983385450621636277440066920043595627074569065446040152660143904127838730788278294186615891819670506731208704000000000000000000000000000000000",
        139: "96157231969410890041971956135297253988256079629956908500367081914696145479218112119985149618783441690577636407442564169301886059792163365100096999581219760002673769583579570682891939608962934200435638009856000000000000000000000000000000000",
        140: "13462012475717524605876073858941615558355851148193967190051391468057460367090535696797920946629681836680869097041958983702264048370902871114013579941370766400374327741701139895604871545254810788060989321379840000000000000000000000000000000000",
        141: "1898143759076170969428526414110767793728175011895349373797246196996101911759765533248506853474785138972002542682916216702019230820297304827075914771733278062452780211579860725280286887880928321116599494314557440000000000000000000000000000000000",
        142: "269536413788816277658850750803729026709400851689139611079208959973446471469886705721287973193419489734024361060974102771686730776482217285444779897586125484868294790044340222989800738079091821598557128192667156480000000000000000000000000000000000",
        143: "38543707171800727705215657364933250819444321791546964384326881276202845420193798918144180166658987031965483631719296696351202501036957071818603525354815944336166154976340651887541505545310130488593669331551403376640000000000000000000000000000000000",
        144: "5550293832739304789551054660550388117999982337982762871343070903773209740507907044212761943998894132603029642967578724274573160149321818341878907651093495984407926316593053871805976798524658790357488383743402086236160000000000000000000000000000000000",
        145: "804792605747199194484902925779806277109997439007500616344745281047115412373646521410850481879839649227439298230298915019813108221651663659572441609408556917739149315905992811411866635786075524601835815642793302504243200000000000000000000000000000000000",
        146: "117499720439091082394795827163851716458059626095095089986332811032878850206552392125984170354456588787206137541623641592892713800361142894297576474973649309989915800122274950466132528824767026591868029083847822165619507200000000000000000000000000000000000",
        147: "17272458904546389112034986593086202319334765035978978227990923221833190980363201642519673042105118551719302218618675314155228928653088005461743741821126448568517622617974417718521481737240752909004600275325629858346067558400000000000000000000000000000000000",
        148: "2556323917872865588581178015776757943261545225324888777742656636831312265093753843092911610231557545654456728355563946494973881440657024808338073789526714388140608147460213822341179297111631430532680840748193219035217998643200000000000000000000000000000000000",
        149: "380892263763056972698595524350736933545970238573408427883655838887865527498969322620843829924502074302514052524979028027751108334657896696442372994639480443832950613971571859528835715269633083149369445271480789636247481797836800000000000000000000000000000000000",
        150: "57133839564458545904789328652610540031895535786011264182548375833179829124845398393126574488675311145377107878746854204162666250198684504466355949195922066574942592095735778929325357290444962472405416790722118445437122269675520000000000000000000000000000000000000",
        151: "8627209774233240431623188626544191544816225903687700891564804750810154197851655157362112747789971982951943289690774984828562603780001360174419748328584232052816331406456102618328128950857189333333217935399039885261005462721003520000000000000000000000000000000000000",
        152: "1311335885683452545606724671234717114812066337360530535517850322123143438073451583919041137664075741408695380032997797693941515774560206746511801745944803272028082373781327597985875600530292778666649126180654062559672830333592535040000000000000000000000000000000000000",
        153: "200634390509568239477828874698911718566246149616161171934231099284840946025238092339613294062603588435530393145048663047173051913507711632216305667129554900620296603188543122491838966881134795135997316305640071571629943041039657861120000000000000000000000000000000000000",
        154: "30897696138473508879585646703632404659201907040888820477871589289865505687886666220300447285640952619071680544337494109264649994680187591361311072737951454695525676891035640863743200899694758450943586711068571022031011228320107310612480000000000000000000000000000000000000",
        155: "4789142901463393876335775239063022722176295591337767174070096339929153381622433264146569329274347655956110484372311586936020749175429076661003216274382475477806479918110524333880196139452687559896255940215628508414806740389616633144934400000000000000000000000000000000000000",
        156: "747106292628289444708380937293831544659502112248691679154935029028947927533099589206864815366798234329153235562080607562019236871366935959116501738803666174537810867225241796085310597754619259343815926673638047312709851500780194770609766400000000000000000000000000000000000000",
        157: "117295687942641442819215807155131552511541831623044593627324799557544824622696635505477776012587322789677057983246655387237020188804608945581290772992175589402436306154362961985393763847475223716979100487761173428095446685622490578985733324800000000000000000000000000000000000000",
        158: "18532718694937347965436097530510785296823609396441045793117318330092082290386068409865488609988797000768975161352971551183449189831128213401843942132763743125584936372389347993692214687901085347282697877066265401639080576328353511479745865318400000000000000000000000000000000000000",
        159: "2946702272495038326504339507351214862194953894034126281105653614484641084171384877168612688988218723122267050655122476638168421183149385930893186799109435156968004883209906330997062135376272570217948962453536198860613811636208208325279592585625600000000000000000000000000000000000000",
        160: "471472363599206132240694321176194377951192623045460204976904578317542573467421580346978030238114995699562728104819596262106947389303901748942909887857509625114880781313585012959529941660203611234871833992565791817698209861793313332044734813700096000000000000000000000000000000000000000",
        161: "75907050539472187290751785709367294850142012310319093001281637109124354328254874435863462868336514307629599224875954998199218529677928181579808491945059049643495805791487187086484320607292781408814365272803092482649411787748723446459202305005715456000000000000000000000000000000000000000",
        162: "12296942187394494341101789284917501765723005994271693066207625211678145401177289658609880984670515317835995074429904709708273401807824365415928975695099566042246320538220924308010459938381430588227927174194100982189204709615293198326390773410925903872000000000000000000000000000000000000000",
        163: "2004401576545302577599591653441552787812849977066285969791842909503537700391898214353410600501293996807267197132074467682448564494675371562796423038301229264886150247730010662205704969956173185881152129393638460096840367667292791327201696065980922331136000000000000000000000000000000000000000",
        164: "328721858553429622726333031164414657201307396238870899045862237158580182864271307153959338482212215476391820329660212699921564577126760936298613378281401599441328640627721748601735615072812402484508949220556707455881820297436017777661078154820871262306304000000000000000000000000000000000000000",
        165: "54239106661315887749844950142128418438215720379413698342567269131165730172604765680403290849565015553604650354393935095487058155225915554489271207416431263907819225703574088519286376487014046409943976621391856730220500349076942933314077895545443758280540160000000000000000000000000000000000000000",
        166: "9003691705778437366474261723593317460743809582982673924866166675773511208652391102946946281027792581898371958829393225850851653767501982045219020431127589808697991466793298694201538496844331704050700119151048217216603057946772526930136930660543663874569666560000000000000000000000000000000000000000",
        167: "1503616514864999040201201707840084015944216200358106545452649834854176371844949314192140028931641361177028117124508668717092226179172831001551576411998307498052564574954480881931656928973003394576466919898225052275172710677111011997332867420310791867053134315520000000000000000000000000000000000000000",
        168: "252607574497319838753801886917134114678628321660161899636045172255501630469951484784279524860515748677740723676917456344471493998101035608260664837215715659672830848592352788164518364067464570288846442542901808782229015393754650015551921726612213033664926565007360000000000000000000000000000000000000000",
        169: "42690680090047052749392518888995665380688186360567361038491634111179775549421800928543239701427161526538182301399050122215682485679075017796052357489455946484708413412107621199803603527401512378815048789750405684196703601544535852628274771797464002689372589486243840000000000000000000000000000000000000000",
        170: "7257415615307998967396728211129263114716991681296451376543577798900561843401706157852350749242617459511490991237838520776666022565442753025328900773207510902400430280058295603966612599658257104398558294257568966313439612262571094946806711205568880457193340212661452800000000000000000000000000000000000000000",
        171: "1241018070217667823424840524103103992616605577501693185388951803611996075221691752992751978120487585576464959501670387052809889858690710767331242032218484364310473577889968548278290754541561964852153468318044293239598173696899657235903947616152278558180061176365108428800000000000000000000000000000000000000000",
        172: "213455108077438865629072570145733886730056159330291227886899710221263324938130981514753340236723864719151973034287306573083301055694802251980973629541579310661401455397074590303866009781148657954570396550703618437210885875866741044575478989978191912006970522334798649753600000000000000000000000000000000000000000",
        173: "36927733697396923753829554635211962404299715564140382424433649868278555214296659802052327860953228596413291334931704037143411082635200789592708437910693220744422451783693904122568819692138717826140678603271725989637483256524946200711557865266227200777205900363920166407372800000000000000000000000000000000000000000",
        174: "6425425663347064733166342506526881458348150508160426541851455077080468607287618805557105047805861775775912692278116502462953528378524937389131268196460620409529506610362739317326974626432136901748478076969280322196922086635340638923811068556323532935233826663322108954882867200000000000000000000000000000000000000000",
        175: "1124449491085736328304109938642204255210926338928074644824004638489082006275333290972493383366025810760784721148670387931016867466241864043097971934380608571667663656813479380532220559625623957805983663469624056384461365161184611811666936997356618263665919666081369067104501760000000000000000000000000000000000000000000",
        176: "197903110431089593781523349201027948917123035651341137489024816374078433104458659211158835472420542693898110922165988275858968674058568071585243060450987108613508803599172370973670818494109816573853124770653833923665200268368491678853380911534764814405201861230320955810392309760000000000000000000000000000000000000000000",
        177: "35028850546302858099329632808581946958330777310287381335557392498211882659489182680375113878618436056819965633223379924827037455308366548670588021699824718224591058237053509662339734873457437533572003084405728604488740447501223027157048421341653372149720729437766809178439438827520000000000000000000000000000000000000000000",
        178: "6235135397241908741680674639927586558582878361231153877729215864681715113389074517106770270394081618113953882713761626619212667044889245663364667862568799843977208366195524719896472807475423880975816549024219691598995799655217698833954618998814300242650289839922492033762220111298560000000000000000000000000000000000000000000",
        179: "1116089236106301664760840760547037993986335226660376544113529639778027005296644338562111878400540609642397745005763331164839067401035174973742275547399815172071920297548998924861468632538100874694671162275335324796220248138283968091277876800787759743434401881346126074043437399922442240000000000000000000000000000000000000000000",
        180: "200896062499134299656951336898466838917540340798867777940435335160044860953395980941180138112097309735631594101037399609671032132186331495273609598531966730972945653558819806475064353856858157445040809209560358463319644664891114256430017824141796753818192338642302693327818731986039603200000000000000000000000000000000000000000000",
        181: "36362187312343308237908191978622497844074801684595067807218795663968119832564672550353604998289613062149318532287769329350456815925726000644523337334285978306103163294146384971986648048091326497552386466930424881860855684345291680413833226169665212441092813294256787492335190489473168179200000000000000000000000000000000000000000000",
        182: "6617918090846482099299290940109294607621613906596302340913820810842197809526770404164356109688709577311175972876374017941783140498482132117303247394840048051710775719534642064901569944752621422554534336981337328498675734550843085835317647162879068664278892019554735323605004669084116608614400000000000000000000000000000000000000000000",
        183: "1211079010624906224171770242040000913194755344907123328387229208384122199143398983962077168073033852647945203036376445283346314711222230177466494273255728793463071956674839497876987299889729720327479783667584731115257659422804284707863129430806869565563037239578516564219715854442393339376435200000000000000000000000000000000000000000000",
        184: "222838537954982745247605724535360168027834983462910692423250174342678484642385413049022198925438228887221917358693265932135721906864890352653834946279054097997205240028170467609365663179710268540256280194835590525207409333795988386246815815268464000063598852082447047816427717217400374445264076800000000000000000000000000000000000000000000",
        185: "41225129521671807870807059039041631085149471940638478098301282253395519658841301414069106801206072344136054711358254197445108552770004715240959465061625008129482969405211536507732647688246399679947411836044584247163370726752257851455660925824665840011765787635252703846039127685219069272373854208000000000000000000000000000000000000000000000",
        186: "7667874091030956263970112981261743381837801780958756926284038499131566656544482063016853865024329456009306176312635280724790190815220877034818460501462251512083832309369345790438272470013830340470218601504292669972386955175919960370752932203387846242188436500157002915363277749450746884661536882688000000000000000000000000000000000000000000000",
        187: "1433892455022788821362411127495946012403668933039287545215115199337602964773818145784151672759549608273740254970462797495535765682446304005511052113773441032759676641852067662811956951892586273667930878481302729284836360617897032589330798322033527247289237625529359545172932939147289667431707397062656000000000000000000000000000000000000000000000",
        188: "269571781544284298416133291969237850331889759411386058500441657475469357377477811407420514478795326355463167934447005929160723948299905153036077797389406914158819208668188720608647906955806219449571005154484913105549235796164642126794190084542303122490376673599519594492511392559690457477160990647779328000000000000000000000000000000000000000000000",
        189: "50949066711869732400649192182185953712727164528751965056583473262863708544343306356002477236492316681182538739610484120611376826228682073923818703706597906776016830438287668195034454414647375475968919974197648576948805565475117361964101925978495290150681191310309203359084653193781496463183427232430292992000000000000000000000000000000000000000000000",
        190: "9680322675255249156123346514615331205418161260462873360750859919944104623425228207640470674933540169424682360525991982916161596983449594045525553704253602287443197783274656957056546338783001340434094795097553229620273057440272298773179365935914105128629426348958748638226084106818484328004851174161755668480000000000000000000000000000000000000000000000",
        191: "1848941630973752588819559184291528260234868800748408811903414244709323983074218587659329898912306172360114330860464468736986865023838872462695380757512438036901650776605459478797800350707553256022912105863632666857472153971092009065677258893759594079568220432651120989901182064402330506648926574264895332679680000000000000000000000000000000000000000000000",
        192: "354996793146960497053355363383973425965094809743694491885455534984190204750249968830591340591162785093141951525209177997501478084577063512837513105442388103085116949108248219929177667335850225156399124325817472036634653562449665740610033707601842063277098323069015230061026956365247457276593902258859903874498560000000000000000000000000000000000000000000000",
        193: "68514381077363375931297585133106871211263298280533036933892918251948709516798243984304128734094417522976396644365371353517785270323373257977640029350380903895427571177891906446331289795819093455185030994882772103070488137552785487937736505567155518212479976352319939401778202578492759254382623135959961447778222080000000000000000000000000000000000000000000000",
        194: "13291789929008494930671731515822733014985079866423409165175226140878049646258859332955000974414316999457420949006882042582450342442734412047662165693973895355712948808511029850588270220388904130305896013007257787995674698685240384659920882080028170533221115412350068243944971300227595295350228888376232520868975083520000000000000000000000000000000000000000000000",
        195: "2591899036156656511480987645585432937922090573952564787209169097471219681020477569926225190010791814894197085056341998303577816776333210349294122310324909594364025017659650820864712692975836305409649722536415268659156566243621875008684572005605493253978117505408263307569269403544381082593294633233365341569450141286400000000000000000000000000000000000000000000000",
        196: "508012211086704676250273578534744855832729752494702698292997143104359057480013603705540137242115195719262628671043031667501252088161309228461647972823682280495348903461291560889483687823263915860291345617137392657194686983749887501702176113098676677779711031060019608283576803094698692188285748113739606947612227692134400000000000000000000000000000000000000000000000",
        197: "100078405584080821221303894971344736599047761241456431563720437191558734323562679929991407036696693556694737848195477238497746661367777918006944650646265409257583733981874437495228286501182991424477395086576066353467353335798727837835328694280439305522603073118823862831864630209655642361092292378406702568679608855350476800000000000000000000000000000000000000000000000",
        198: "19815524305648002601818171204326257846611456725808373449616646563928629396065410626138298593265945324225558093942704493222553838950820027765375040827960551033001579328411138624055200727234232302046524227142061137986535960488148111891395081467526982493475408477527124840709196781511817187496273890924527108598562553359394406400000000000000000000000000000000000000000000000",
        199: "3943289336823952517761816069660925311475679888435866316473712666221797249817016714601521420059923119520886060694598194151288213951213185525309633124764149655567314286353816586186984944719612228107258321201270166459320656137141474266387621212037869516201606287027897843301130159520851620311758504293980894611113948118519486873600000000000000000000000000000000000000000000000",
        200: "788657867364790503552363213932185062295135977687173263294742533244359449963403342920304284011984623904177212138919638830257642790242637105061926624952829931113462857270763317237396988943922445621451664240254033291864131227428294853277524242407573903240321257405579568660226031904170324062351700858796178922222789623703897374720000000000000000000000000000000000000000000000000",
        201: "158520231340322891214025006000369197521322331515121825922243249182116249442644071926981161086408909404739619639922847404881786200838770058117447251615518816153806034311423426764716794777728411569911784512291060691664690376713087265508782372723922354551304572738521493300705432412738235136532691872618031963366780714364483372318720000000000000000000000000000000000000000000000000",
        202: "32021086730745224025233051212074577899307110966054608836293136334787482387414102529250194539454599699757403167264415175786120812569431551739724344826334800863068818930907532206472792545101139137122180471482794259716267456096043627632774039290232315619363523693181341646742497347373123497579603758268842456600089704301625641208381440000000000000000000000000000000000000000000000000",
        203: "6500280606341280477122309396051139313559343526109085593767506675961858924645062813437789491509283739050752842954676280684582524951594605003164041999745964575202970242974229037913976886655531244835802635711007234722402293587496856409453129975917160070730795309715812354288726961516744070008659562928575018689818209973230005165301432320000000000000000000000000000000000000000000000000",
        204: "1326057243693621217332951116794432419966106079326253461128571361896219220627592813941309056267893882766353579962753961259654835090125299420645464567948176773341405929566742723734451284877728373946503737685045475883370067891849358707528438515087100654429082243182025720274900300149415790281766550837429303812722914834538921053721492193280000000000000000000000000000000000000000000000000",
        205: "271841734957192349553254978942858646093051746261881959531357129188724940228656526857968356534918245967102483892364562058229241193475686381232320236429376238534988215561182258365562513399934316659033266225434322556090863917829118535043329895592855634157961859852315272656354561530630237007762142921673007281608197541080478816012905899622400000000000000000000000000000000000000000000000000",
        206: "55999397401181624007970525662228881095168659729947683663459568612877337687103244532741481446193158669223111681827099783995223685855991394533857968704451505138207572405603545223305877760386469231760852842439470446554717967072798418218925958492128260636540143129576946167209039675309828823599001441864639500011288693462578636098658615322214400000000000000000000000000000000000000000000000000",
        207: "11591875262044596169649898812081378386699912564099170518336130702865608901230371618277486659361983844529184118138209655287011302972190218668508599521821461563608967487959933861224316696399999130974496538384970382436826619184069272571317673407870549951763809627822427856612271212789134566484993298465980376502336759546753777672422333371698380800000000000000000000000000000000000000000000000000",
        208: "2411110054505276003287178952912926704433581813332627467813915186196046651455917296601717225147292639662070296572747608299698351018215565483049788700538864005230665237495666243134657872851199819242695279984073839546859936790286408694834076068837074389966872402587064994175352412260139989828878606080923918312486045985724785755863845341313263206400000000000000000000000000000000000000000000000000",
        209: "503922001391602684687020401158801681226618598986519140773108273914973750154286714989758900055784161689372691983704250134636955362807053185957405838412622577093209034636594244815143495425900762221723313516671432465293726789169859417220321898386948547503076332140696583782648654162369257874235628670913098927309583611016480222975543676334472010137600000000000000000000000000000000000000000000000000",
        210: "105823620292236563784274284243348353057589905787169019562352737522144487532400210147849369011714673954768265316577892528273760626189481169051055226066650741189573897273684791411180134039439160066561895838501000817711682625725670477616267598661259194975646029749546282594356217374097544153589482020891750774735012558313460846824864172030239122128896000000000000000000000000000000000000000000000000000",
        211: "22328783881661914958481873975346502495151470121092663127656427617172486869336444341196216861471796204456103981797935323465763492125980526669772652700063306391000092324747490987759008282321662774044560021923711172537165034028116470777032463317525690139861312277154265627409161865934581816407380706408159413469087649804140238680046340298380454769197056000000000000000000000000000000000000000000000000000",
        212: "4733702182912325971198157282773458528972111665671644583063162654840567216299326200333597974632020795344694044141162288574741860330707871653991802372413420954892019572846468089404909755852192508097446724647826768577878987213960691804730882223315446309650598202756704313010742315578131345078364709758529795655446581758477730600169824143256656411069775872000000000000000000000000000000000000000000000000000",
        213: "1008278564960325431865207501230746666671059784788060296192453645481040817071756480671056368596620429408419831402067567466420016250440776662300253905324058663392000169016297703043245777996517004224756152349987101707088224276573627354407677913566190063955577417187178018671288113218141976501691683178566846474610121914555756617836172542513667815557862260736000000000000000000000000000000000000000000000000000",
        214: "215771612901509642419154405263379786667606793944644903385185080132942734853355886863606062879676771893401843920042459437813883477594326205732254335739348553965888036169487708451254596491254638904097816602897239765316879995186756253843243073503164673686493567278056095995655656228682382971362020200213305145566566089714931916216940924097924912529382523797504000000000000000000000000000000000000000000000000000",
        215: "46390896773824573120118197131626654133535460698098654227814792228582687993471515675675303519130505957081396442809128779129984947682780134232434682183959939102665927776439857317019738245619747364381030569622906549543129198965152594576297260803180404842596116964782060639065966089166712338842834343045860606296811709288710361986642298681053856193817242616463360000000000000000000000000000000000000000000000000000",
        216: "10020433703146107793945530580431357292843659510789309313207995121373860606589847385945865560132189286729581631646771816292076748699480508994205891351735346846175840399711009180476263461053865430706302603038547814701315906976472960428480208333486967446000761264392925098038248675260009865190052218097905890960111329206361438189114736515107632937864524405156085760000000000000000000000000000000000000000000000000000",
        217: "2174434113582705391286180135953604532547074113841280120966134941338127751629996882750252826548685075220319214067349484135380654467787270451742678423326570265620157366737288992163349171048688798463267664859364875790185551813894632412980205208366671935782165194373264746274299962531422140746241331327245578338344158437780432087037897823778356347516601795918870609920000000000000000000000000000000000000000000000000000",
        218: "474026636761029775300387269637885788095262156817399066370617417211711849855339320439555116187613346398029588666682187541512982673977624958479903896285192317905194305948729000291610119288614158064992350939341542922260450295429029866029684735423934482000512012373371714687797391831850026682680610229339536077759026539436134194974261725583681683758619191510313792962560000000000000000000000000000000000000000000000000000",
        219: "103811833450665520790784812050696987592862412343010395535165214369364895118319311176262570445087322861168479918003399071591343205601099865907098953286457117621237553002771651063862616124206500616233324855715797899975038614698957540660500957057841651558112130709768405516627628811175155843507053640225358401029226812136513388699363317902826288743137602940758720658800640000000000000000000000000000000000000000000000000000",
        220: "22838603359146414573972658651153337270429730715462287017736347161260276926030248458777765497919211029457065581960747795750095505232241970499561769723020565876672261660609763234049775547325430135571331468257475537994508495233770658945310210552725163342784668756149049213658078338458534285571551800849578848226429898670032945513859929938621783523490272646966918544936140800000000000000000000000000000000000000000000000000000",
        221: "5047331342371357620847957561904887536764970488117165430919732722638521200652684909389886175040145637510011493613325262860771106656325475480403151108787545058744569826994757674725000395958920059961264254484902093896786377446663315626913556532152261098755411795108939876218435312799336077111312947987756925458041007606077280958563044516435414158691350254979688998430887116800000000000000000000000000000000000000000000000000000",
        222: "1120507558006441391828246578742885033161823448362010725664180664425751706544896049884554730858912331527222551582158208355091185677704255556649499546150835003041294501592836203788950087902880253311400664495648264845086575793159256069174809550137801963923701418514184652520492639441452609118711474453282037451685103688549156372800995882648661943229479756605490957651656939929600000000000000000000000000000000000000000000000000000",
        223: "249873185435436430377698987059663362395086628984728391823112288166942630559511819124255704981537449930570629002821280463185334406128048989132838398791636205678208673855202473444935869602342296488442348182529563060454306401874514103425982529680729837954985416328663177512069858595443931833472658803081894351725778122546461871134622081830651613340173985723024483556319497604300800000000000000000000000000000000000000000000000000000",
        224: "55971593537537760404604573101364593176499404892579159768377152549395149245330647483833277915864388784447820896631966823753514906972682973565755801329326510071918742943565354051665634790924674413411085992886622125541764634019891159167420086648483483701916733257620551762703648325379440730697875571890344334786574299450407459134155346330065961388198972801957484316615567463363379200000000000000000000000000000000000000000000000000000",
        225: "12593608545945996091036028947807033464712366100830310947884859323613908580199395683862487531069487476500759701742192535344540854068853669052295055299098464766181717162302204661624767827958051743017494348399489978246897042654475510812669519495908783832931264982964624146608320873210374164407022003675327475326979217376341678305184952924264841312344768880440433971238502679256760320000000000000000000000000000000000000000000000000000000",
        226: "2846155531383795116574142542204389563024994738787650274221978207136743339125063424552922182021704169689171692593735512987866233019560929205818682497596253037157068078680298253527197529118519693921953722738284735083798731639911465443663311406075385146242465886150005057133480517345544561155986972830624009423897303127053219296971799360883854136589917766979538077499901605512027832320000000000000000000000000000000000000000000000000000000",
        227: "646077305624121491462330357080396430806673805704796612248389053020040737981389397373513335318926846519441974218777961448245634895440330929720840926954349439434654453860427703550673839109903970520283495061590634864022312082259902655711571689179112428197039756156051147969300077437438615382409042832551650139224687809841080780412598454920634889005911333104355143592477664451230317936640000000000000000000000000000000000000000000000000000000",
        228: "147305625682299700053411321414330386223921627700693627592632704088569288259756782601161040452715321006432770121881375210200004756160395451976351731345591672191101215480177516409553635317058105278624636874042664748997087154755257805502238345132837633628925064403579661737000417655736004307189261765821776231743228820643766417934072447721904754693347783947792972739084907494880512489553920000000000000000000000000000000000000000000000000000000",
        229: "33732988281246631312231192603881658445278052743458840718712889236282367011484303215665878263671808510473104357910834923135801089160730558502584546478140492931762178344960651257787782487606306108805041844155770227520332958438954037460012581035419818101023839748419742537773095643163544986346340944373186757069199399927422509706902590528316188824776642524044590757250443816327637360107847680000000000000000000000000000000000000000000000000000000",
        230: "7758587304686725201813174298892781442413952130995533365303964524344944412641389739603152000644515957408814002319492032321234250506968028455594445689972313374305301019340949789291189972149450405025159624155827152329676580440959428615802893638146558163235483142136540783687811997927615346859658417205832954125915861983307177232587595821512723429698627780530255874167602077755356592824804966400000000000000000000000000000000000000000000000000000000",
        231: "1792233667382633521618843263044232513197622942259968207385215805123682159320161029848328112148883186161436034535802659466205111867109614573242316954383604389464524535467759401326264883566523043560811873179996072188155290081861628010250468430411854935707396605833540921031884571521279145124581094374547412403086564118143957940727734634769439112260383017302489106932716079961487372942529947238400000000000000000000000000000000000000000000000000000000",
        232: "415798210832770977015571637026261943061848522604312624113370066788694260962277358924812122018540899189453160012306216996159585953169430580992217533416996218355769692228520181107693452987433346106108354577759088747652027298991897698378108675855550345084116012553381493679397220592936761668902813894894999677516082875409398242248834435266509874044408860014177472808390130551065070522666947759308800000000000000000000000000000000000000000000000000000000",
        233: "96880983124035637644628191427119032733410705766804841418415225561765762804210624629481224430320029511142586282867348560105183527088477325371186685286160118876894338289245202198092574546071969642723246616617867678202922360665112163722099321474343230404599030924937888027299552398154265468854355637510534924861247309970389790443978423417096800652347264383303351164354900418398161431781398827918950400000000000000000000000000000000000000000000000000000000",
        234: "22670150051024339208842996793945853659618105149432332891909162781453188496185286163298606516694886905607365190190959563064612945338703694136857684356961467817193275159683377314353662443780840896397239708288581036699483832395636246310971241224996315914676173236435465798388095261168098119711919219177465172417531870533071210963890951079600651352649259865692984172459046697905169775036847325733034393600000000000000000000000000000000000000000000000000000000",
        235: "5327485261990719714078104246577275610010254710116598229598653253641499296603542248375172531423298422817730819694875497320184042154595368122161555823885944937040419662525593668873110674288497610653351331447816543624378700612974517883078241687874134239948900710562334462621202386374503058132301016506704315518119989575271734576514373503706153067872576068437851280527875974007714897133659121547263082496000000000000000000000000000000000000000000000000000000000",
        236: "1257286521829809852522432602192237043962420111587517182185282167859393833998435970616540717415898427784984473447990617367563433948484506876830127174437083005141539040356040105854054119132085436114190914221684704295353373344661986220406465038338295680627940567692710933178603763184382721719223039895582218462276317539764129360057392146874652124017927952151332902204578729865820715723543552685154087469056000000000000000000000000000000000000000000000000000000000",
        237: "297976905673664935047816526719560179419093566446241572177911873782676338657629325036120150027567927385041320207173776316112533845790828129808740140341588672218544752564381505087410826234304248359063246670539274917998749482684890734236332214086176076308821914543172491163329091874698705047455860455252985775559487256924098658333601938809292553392248924659865897822485158978199509626479821986381518730166272000000000000000000000000000000000000000000000000000000000",
        238: "70918503550332254541380333359255322701744268814205494178343025960276968600515779358596595706561166717639834209307358763234783055298217094894480153401298103988013651110322798210803776643764411109457052707588347430483702376879003994748247066952509906161499615661275052896872323866178291801294494788350210614583157967147935480683397261436611627707355244069048083681751467836811483291102197632758801457779572736000000000000000000000000000000000000000000000000000000000",
        239: "16949522348529408835389899672862022125716880246595113108623983204506195495523271266704586373868118845515920376024458744413113150216273885679780756662910246853135262615367148772382102617859694255160235597113615035885604868074081954744831049001649867572598408143044737642352485404016611740509384254415700336885374754148356579883331945483350179022057903332502491999938600812997944506573425234229353548409317883904000000000000000000000000000000000000000000000000000000000",
        240: "4067885363647058120493575921486885310172051259182827146069755969081486918925585104009100729728348522923820890245870098659147156051905732563147381599098459244752463027688115705371704628286326621238456543307267608612545168337779669138759451760395968217423617954330737034164596496963986817722252221059768080852489940995605579171999666916004042965293896799800598079985264195119506681577622056215044851618236292136960000000000000000000000000000000000000000000000000000000000",
        241: "980360372638941007038951797078339359751464353463061342202811188548638347461066010066193275864531994024640834549254693776854464608509281547718518965382728677985343589672835884994580815417004715718468026937051493675623385569404900262441027874255428340399091926993707625233667755768320823071062785275404107485450075779940944580451919726756974354635829128751944137276448671023801110260206915547825809239994946405007360000000000000000000000000000000000000000000000000000000000",
        242: "237247210178623723703426334892958125059854373538060844813080307628770480085577974436018772759216742553963081960919635893998780435259246134547881589622620340072453148700826284168688557330915141203869262518766461469500859307795985863510728745569813658376580246332477245306547596895933639183197194036647794011478918338745708588469364573875187793821870649157970481220900578387759868682970073562573845836078777030011781120000000000000000000000000000000000000000000000000000000000",
        243: "57651072073405564859932599378988824389544612769748785289578514753791226660795447787952561780489668440613028916503471522241703645767996810695135226278296742637606115134300787052991319431412379312540230792060250137088708811794424564833107085173464718985508999858791970609491066045711874321516918150905413944789377156315207186998055591451670633898714567745386826936678840548225648089961727875705444538167142818292862812160000000000000000000000000000000000000000000000000000000000",
        244: "14066861585910957825823554248473273151048885515818703610657157599925059305234089260260425074439479099509579055626847051426975689567391221809612995211904405203575892092769392040929881941264620552259816313262701033449644950077839593819278128782325391432464195965545240828715820115153697334450128028820921002528608026140910553627525564314207634671286354529874385772549637093767058133950661601672128467312782847663458526167040000000000000000000000000000000000000000000000000000000000",
        245: "3446381088548184667326770790875951922006976951375582384611003611981639529782351868763804143237672379379846868628577527599609043944010849343355183826916579274876093562728501050027821075609832035303654996749361753195163012769070700485723141551669720900953728011558584003035375928212655846940281367061125645619508966404523085638743763256980870494465156859819224514274661087972929242817912092409671474491631797677547338910924800000000000000000000000000000000000000000000000000000000000",
        246: "847809747782853428162385614555484172813716330038393266614306888547483324326458559715895819236467405327442329682630071789503824810226668938465375221421478501619519016431211258306843984600018680684699129200342991286010101141191392319487892821710751341634617090843411664746702478340313338347309216297036908822399205735512679067130965761217294141638428587515529230511566627641340593733206374732779182724941422228676645372087500800000000000000000000000000000000000000000000000000000000000",
        247: "209409007702364796756109246795204590684987933519483136853733801471228381108635264249826267351407449115878255431609627732007444728125987227800947679691105189900021197058509180801790464196204614129120684912484718847644494981874273902913509526962555581383750421438322681192435512150057394571785376425368116479132603816671631729581348543020671652984691861116335719936356957027411126652101974558996458133060531290483131406905612697600000000000000000000000000000000000000000000000000000000000",
        248: "51933433910186469595515093205210738489877007512831817939725982764864638514941545533956914303149047380737807347039187677537846292575244832494635024563394087095205256870510276838844035120658744304021929858296210274215834755504819927922550362686713784183170104516704024935724007013214233853802773353491292886824885746534564668936174438669126569940203581556851258544216525342797959409721289690631121616999011760039816588912591949004800000000000000000000000000000000000000000000000000000000000",
        249: "12931425043636430929283258208097473883979374870695122666991769708451294990220444837955271661484112797803714029412757731706923726851235963291164121116285127686706108960757058932872164745044027331701460534715756358279742854120700162052715040308991732261609356024659302208995277746290344229596890565019331928819396550887106602565107435228612515915110691807655963377509914810356691893020601132967149282632753928249914330639235395302195200000000000000000000000000000000000000000000000000000000000",
        250: "3232856260909107732320814552024368470994843717673780666747942427112823747555111209488817915371028199450928507353189432926730931712808990822791030279071281921676527240189264733218041186261006832925365133678939089569935713530175040513178760077247933065402339006164825552248819436572586057399222641254832982204849137721776650641276858807153128978777672951913990844377478702589172973255150283241787320658188482062478582659808848825548800000000000000000000000000000000000000000000000000000000000000",
        251: "811446921488186040812524452558116486219705773136118947353733549205318760636332913581693296758128078062183055345650547664609463859915056696520548600046891762340808337287505448037728337751512715064266648553413711482053864096073935168807868779389231199415987090547371213614453678579719100407204882954963078533417133568165939310960491560595435373673195910930411701938747154349882416287042721093688617485205308997682124247612021055212748800000000000000000000000000000000000000000000000000000000000000",
        252: "204484624215022882284756162044645354527365854830301974733140854399740327680355894222586710783048275671670129947103938011481584892698594287523178247211816724109883700996451372905507541113381204196195195435460255293477573752210631662539582932406086262252828746817937545830842327002089213302615630504650695790421117659177816706362043873270049714165645369554463748888564282896170368904334765715609531606271737867415895310398229305913612697600000000000000000000000000000000000000000000000000000000000000",
        253: "51734609926400789218043308997295274695423561272066399607484636163134302903130041238314437828111213744932542876617296316904840977852744354743364096544589631199800576352102197345093407901685444661637384445171444589249826159309289810622514481898739824349965672944938199095203108731528570965561754517676626034976542767771987626709597099937322577683908278497279328468806763572731103332796695726049211496386749680456221513530752014396144012492800000000000000000000000000000000000000000000000000000000000000",
        254: "13140590921305800461383000485312999772637584563104865500301097585436112937395030474531867208340248291212865890660793264493829608374597066104814480522325766324749346393433958125653725607028102944055895649073546925669455844464559611898118678402279915384891280928014302570181589617808257025252685647489863012884041863014084857184237663384079934731712702738308949431076917947473700246530360714416499720082234418835880264436811011656620579173171200000000000000000000000000000000000000000000000000000000000000",
        255: "3350850684932979117652665123754814942022584063591740702576779884286208799035732771005626138126763314259280802118502282445926550135522251856727692533193070412811083330325659322041700029792166250734253390513754466045711240338462701034020262992581378423147276636643647155396305352541105541439434840109915068285430675068591638581980604162940383356586739198268782104924614076605793562865241982176207428620969776803149467431386807972438247689158656000000000000000000000000000000000000000000000000000000000000000",
        256: "857817775342842654119082271681232625157781520279485619859655650377269452553147589377440291360451408450375885342336584306157196834693696475322289288497426025679637332563368786442675207626794560187968867971521143307702077526646451464709187326100832876325702818980773671781454170250523018608495319068138257481070252817559459476987034665712738139286205234756808218860701203611083152093501947437109101726968262861606263662435022840944191408424615936000000000000000000000000000000000000000000000000000000000000000",
        257: "220459168263110562108604143822076784665549850711827804303931502146958249306158930470002154879636011971746602532980502166682399586516279994157828347143838488599666794468785778115767528360086201968307999068680933830079433924348138026430261142807914049215705624478058833647833721754384415782383297000511532172635054974112781085585667909088173701796554745332499712247200209328048370088030000491337039143830843555432809761245800870122657191965126295552000000000000000000000000000000000000000000000000000000000000000",
        258: "56878465411882525024019869106095810443711861483651573510414327553915228320989004061260555958946091088710623453508969559004059093321200238492719713563110330058714032972946730753868022316902240107823463759719680928160493952481819610819007374844441824697652051115339179081141100212631179271854890626131975300539844183321097520081102320544748815063511124295784925759777654006636479482711740126764956099108357637301664918401416624491645555527002584252416000000000000000000000000000000000000000000000000000000000000000",
        259: "14731522541677573981221146098478814904921372124265757539197310836464044135136152051866483993367037591976051474458823115782051305170190861769614405812845575485206934539993203265251817780077680187926277113767397360393567933692791279202122910084710432596691881238872847382015544955071475431410416672168181602839819643480164257701005501021089943101449381192608295771782412387718848186022340692832123629669064628061131213865966905743336198881493669321375744000000000000000000000000000000000000000000000000000000000000000",
        260: "3830195860836169235117497985604491875279556752309096960191300817480651475135399533485285838275429773913773383359294010103333339344249624060099745511339849626153802980398232848965472622820196848860832049579523313702327662760125732592551956622024712475139889122106940319324041688318583612166708334763727216738353107304842707002261430265483385206376839110078156900663427220806900528365808580136352143713956803295894115605151395493267411709188354023557693440000000000000000000000000000000000000000000000000000000000000000",
        261: "999681119678240170365666974242772379447964312352674306609929513362450035010339278239659603789887170991494853056775736636970001568849151879686033578459700752426142577883938773579988354556071377552677164940255584876307519980392816206656060678348449956011511060869911423343574880651150322775510875373332803568710161006563946527590233299291163538864355007730398951073154504630601037903476039415587909509342725660228364172944514223742794456098160400148557987840000000000000000000000000000000000000000000000000000000000000000",
        262: "261916453355698924635804747251606363415366649836400668331801532500961909172708890898790816192950438799771651500875242998886140411038477792477740797556441597135649355405591958677956948893690700918801417214346963237592570234862917846143887897727293888475015897947916792916016618730601384567183849347813194535002062183719753990228641124414284847182461012025364525181166480213217471930710722326884032291447794122979831413311462726620612147497718024838922192814080000000000000000000000000000000000000000000000000000000000000000",
        263: "68884027232548817179216648527172473578241428906973375771263803047752982112422438306381984658745965404339944344730188908707054928103119659421645829757344140046675780471670685132302677559040654341644772727373251331486845971768947393535842517102278292668929181160302116536912370726148164141169352378474870162705542354318295299430132615720956914808987246162670870122646784296076195117776919971970500492650769854343695661700914697101220994791899840532636536710103040000000000000000000000000000000000000000000000000000000000000000",
        264: "18185383189392887735313195211173533024655737231440971203613644004606787277679523712884843949908934866745745307008769871898662501019223590087314499055938852972322406044521060874927906875586732746194220000026538351512527336547002111893462424515001469264597303826319758765744865871703115333268709027917365722954263181540029959049555010550332625509572632986945109712378751054164115511093106872600212130059803241546735654689041480034722342625061557900616045691467202560000000000000000000000000000000000000000000000000000000000000000",
        265: "4819126545189115249857996730960986251533770366331857368957615661220798628585073783914483646725867739687622506357324016053145562770094251373138342249823796037665437601798081131855895322030484177741468300007032663150819744184955559651767542496475389355118285513974736072922389456001325563316207892398101916582879743108107939148132077795838145760036747741540454073780369029353490610439673321239056214465847859009884948492595992209201420795641312843663252108238808678400000000000000000000000000000000000000000000000000000000000000000",
        266: "1281887661020304656462227130435622342907982917444274060142725765884732435203629626521252650029080818756907586691048188270136719696845070865254799038453129746019006402078289581073668155660108791279230567801870688398118051953198178867370166304062453568461463946717279795397355595296352599842111299377895109811046011666756711813403132693692946772169774899249760783625578161808028502376953103449588953047915530496629396299030533927647577931640589216414425060791523108454400000000000000000000000000000000000000000000000000000000000000000",
        267: "342264005492421343275414643826311165556431438957621174058107779491223560199369110281174457557764578608094325646509866268126504159057633921023031343266985642187074709354903318146669397561249047271554561603099473802297519871503913757587834403184675102779210873773513705371093943944126144157843716933897994319549285115024042054178636429216016788169329898099686129228029369202743610134646478621040250463793446642600048811841152558681903307748037320782651491231336669957324800000000000000000000000000000000000000000000000000000000000000000",
        268: "91726753471968919997811124545451392369123625640642474647572884903647914133430921555354754625480907066969279273264644159857903114627445890834172399995552152106136022107114089263307398546414744668776622509630658979015735325563048887033539620053492927544828514171301673039453176977025806634302116138284662477639208410826443270519874563029892499229380412690715882633111870946335287516085256270438787124296643700216813081573428885726750086476474001969750599649998227548563046400000000000000000000000000000000000000000000000000000000000000000",
        269: "24674496683959639479411192502726424547294255297332825680197106039081288901892917898390428994254364001014736124508189279001775937834782944634392375598803528916550589946813690011829690208985566315900911455090647265355232802576460150612022157794389597509558870312080150047612904606819941984627269241198574206484947062512313239769846257455041082292703331013802572428307093284564192341826933936748033736435797155358322718943252370260495773262171506529862911305849523210563459481600000000000000000000000000000000000000000000000000000000000000000",
        270: "6662114104669102659441021975736134627769448930279862933653218630551948003511087832565415828448678280273978753617211105330479503215391395051285941411676952807468659285639696303194016356426102905293246092874474761645912856695644240665245982604485191327580894984261640512855484243841384335849362695123615035750935706878324574737858489512861092219029899373726694555642915186832331932293272162921969108837665231946747134114678139970333858780786306763062986052579371266852134060032000000000000000000000000000000000000000000000000000000000000000000",
        271: "1805432922365326820708516955424492484125520660105842855020022248879577908951504802625227689509591813954248242230264209544559945371371068058898490122564454210824006666408357698165578432591473887334469691168982660406042384164519589220281661285815486849774422540734904578983836230081015155015177290378499674688503576564025959753959650657985355991357102730279934224579230015631561953651476756151853628495007277857568473345077775931960475729593089132790069220249009613316928330268672000000000000000000000000000000000000000000000000000000000000000000",
        272: "491077754883368895232716611875461955682141619548789256565446051695245191234809306314061931546608973395555521886631864996120305141012930512020389313337531545344129813263073293901037333664880897354975755997963283630443528492749328267916611869741812423138642931079894045483603454582036122164128222982951911515272972825415061053077024978972016829649131942636142109085550564251784851393201677673304186950641979577258624749861155053493249398449320244118898827907730614822204505833078784000000000000000000000000000000000000000000000000000000000000000000",
        273: "134064227083159708398531635042001113901224662136819467042366772112801937207102940623738907312224249736986657475050499143940843303496530029781566282541146111878947439020819009234983192090512484977908381387443976431111083278520566617141235040439514791516849520184811074417023743100895861350807004874345871843669521581338311667490027819259360594494213020339666795780355304040737264430344058004812043037525260424591604556712095329603657085776664426644459380018810457846461830092430508032000000000000000000000000000000000000000000000000000000000000000000",
        274: "36733598220785760101197668001508305208935557425488533969608495558907730794746205730904460603549444427934344148163836765439791065158049228160149161416274034654831598291704408530385394632800420883946896500159649542124436818314635253096698401080427052875616768530638234390264505609645466010121119335570768885165448913286697396892267622477064802891414367573068702043817353307162010453914271893318499792281921356338099648539114120311402041502806052900581870125154065449930541445325959200768000000000000000000000000000000000000000000000000000000000000000000",
        275: "10101739510716084027829358700414783932457278292009346841642336278699625968555206575998726665976097217681944640745055110495942542918463537744041019389475359530078689530218712345855983524020115743085396537543903624084220125036524694601592060297117439540794611345925514457322739042652503152783307817281961443420498451153841784145373596181192820795138951082593893062049772159469552874826424770662587442877528372992977403348256383085635561413271664547660014284417367998730898897464638780211200000000000000000000000000000000000000000000000000000000000000000000",
        276: "2788080104957639191680903001314480365358208808594579728293284812921096767321237014975648559809402832080216720845635210496880141845495936417355321351495199230301718310340364607456251452629551945091569444362117400247244754510080815710039408642004413313259312731475441990221075975772090870168192957569821358384057572518460332424123112546009218539458350498795914485125737116013596593452093236702874134234197830946061763324118761731635414950062979415154163942499193567649728095700240303338291200000000000000000000000000000000000000000000000000000000000000000000",
        277: "772298189073266056095610131364111061204223839980698584737239893179143804547982653148254651067204584486220031674240953307635799291202374387607424014364170186793575971964280996265381652378385888790364736088306519868486796999292385951680916193835222487772829626618697431291238045288869171036589449246840516272383947587613512081482102175244553535429963088166468312379829181135766256386229826566696135182872799172059108440780896999663009941167445297997703412072276618238974682508966564024706662400000000000000000000000000000000000000000000000000000000000000000000",
        278: "214698896562367963594579616519222875014774227514634206556952690303801977664339177575214792996682874487169168805438985019522752202954260079754863875993239311928614120206070116961776099361191277083721396632549212523439329565803283294567294701886191851600846636199997885898964176590305629548171866890621663523722737429356556358652024404717985882849529738510278190841592512355743019275371891785541525580838638169832432146537089365906316763644549792843361548556092899870434961737492704798868452147200000000000000000000000000000000000000000000000000000000000000000000",
        279: "59900992140900661842887713008863182129122009476582943629389800594760751768350630543484927246074521981920198096717476820446847864624238562251607021402113768028083339537493562632335531721772366306358269660481230294039572948859116039184275221826247526596636211499799410165811005268695270643939950862483444123118643742790479224063914808916318061315018797044367615244804310947252302377828757808166085637053980049383248568883847933087862377056829392203297872047149919063851354324760464638884298149068800000000000000000000000000000000000000000000000000000000000000000000",
        280: "16772277799452185316008559642481690996154162653443224216229144166533010495138176552175779628900866154937655467080893509725117402094786797430449965992591855047863335070498197537053948882096262565780315504934744482331080425680552490971597062111349307447058139219943834846427081475234675780303186241495364354473220247981334182737896146496569057168205263172422932268545207065230644665792052186286503978375114413827309599287477421264601465575912229816923404173201977337878379210932930098887603481739264000000000000000000000000000000000000000000000000000000000000000000000",
        281: "4713010061646064073798405259537355169919319705617546004760389510795775949133827611161394075721143389537481186249731076232757989988635090077956440443918311268449597154809993507912159635869049780984268656886663199535033599616235249963018774453289155392623337120804217591846009894540943894265195333860197383606974889682754905349348817165535905064265678951450843967461203185329811151087566664346507617923407150285473997399781155375353011826831336578555476572669755631943824558272153357787416578368733184000000000000000000000000000000000000000000000000000000000000000000000",
        282: "1329068837384190068811150283189534157917248156984147973342429842044408817655739386347513129353362435849569694522424163497637753176795095401983716205184963777702786397656418169231229017315072038237563761242039022268879475091778340489571294395827541820719781068066789360900574790260546178182785084148575662177166918890536883308516366440681125228122921464309137998824059298263006744606693799345715148254400816380503667266738285815849549335166436915152644393492871088208158525432747246896051475099982757888000000000000000000000000000000000000000000000000000000000000000000000",
        283: "376126480979725789473555530142638166690581228426513876455907645298567695396574246336346215607001569345428223549846038269831484149033011998761391686067344749089888550536766341892437811900165386821230544431497043302092891450973270358548676314019194335263698042262901389134862665643734568425728178814046912396138238046021937976310131702712758439558786774399486053667208781408430908723694345214837386955995431035682537836486934885885422461852101646988198363358482517962908862697467470871582567453295120482304000000000000000000000000000000000000000000000000000000000000000000000",
        284: "106819920598242124210489770560509239340125068873129940913477771264793225492627085959522325232388445694101615488156274868632141498325375407648235238843125908741528348352441641097452338579646969857229474618545160297794381172076408781827824073181451191214890244002663994514300997042820617432906802783189323120503259605070230385272077403570423396834695443929454039241487293919994378077529194041013817895502702414133840745562289507591459979165996867744648335193809035101466117006080761727529449156735814216974336000000000000000000000000000000000000000000000000000000000000000000000",
        285: "30443677370499005399989584609745133211935644628842033160341164810466069265398719498463862691230707022818960414124538337560160327022731991179747043070290883991335579280445867712773916495199386409310400266285370684871398634041776502820929860856713589496243719540759238436575784157203875968378438793208957089343428987445015659802542060017570668097888201519894401183823878767198397752095820301688938100218270188028144612485252509663566094062309107307224775530235575003917843346733017092345893009669707051837685760000000000000000000000000000000000000000000000000000000000000000000000",
        286: "8706891727962715544397021198387108098613594363848821483857573135793295809904033776560664729691982208526222678439617964542205853528501349477407654318103192821521975674207518165853340117627024513062774476157616015873220009335948079806785940205020086595925703788657142192860674268960308526956233494857761727552220690409274478703527029165025211075996025634689798738573629327418741757099404606283036296662425273776049359170782217763779902901820404689866285801647374451120503197165642888410925400765536216825578127360000000000000000000000000000000000000000000000000000000000000000000000",
        287: "2498877925925299361241945083937100024302101582424611765867123489972675897442457693872910777421598893847025908712170355823613079962679887300015996789295616339776807018497557713599908613758956035249016274657235796555614142679417098904547564838840764853030676987344599809351013515191608547236439013024177615807487338147461775387912257370362235578810859357155972237970631616969178884287529122003231417142116053573726166082014496498204832132822456145991624025072796467471584417586539508973935590019708894228940922552320000000000000000000000000000000000000000000000000000000000000000000000",
        288: "719676842666486216037680184173884806999005255738288188569731565112130658463427815835398303897420481427943461709105062477200567029251807542404607075317137505855720421327296621516773680762579338151716687101283909408016873091672124484509698673586140277672834972355244745093091892375183261604094435750963153352556353386468991311718730122664323846697527494860920004535541905687123518674808387136930648136929423429233135831620174991482991654252867370045587719220965382631816312264923378584493449925676161537934985695068160000000000000000000000000000000000000000000000000000000000000000000000",
        289: "207986607530614516434889573226252709222712518908365286496652422317405760295930638776430109826354519132675660433931363055910963871453772379754931444766652739192303201763588723618347593740385428725846122572271049818916876323493243976023302916666394540247449307010665731331903556896427962603583291932028351318888786128689538489086713005449989591695585446014805881310771610743578696897019623882572957311572603371048376255338230572538584588079078669943174850854858995580594914244562856410918607028520410684463210865874698240000000000000000000000000000000000000000000000000000000000000000000000",
        290: "60316116183878209766117976235613285674586630483425933084029202472047670485819885245164731849642810548475941525840095286214179522721593990128930118982329294365767928511440729849320802184711774330495375545958604447485894133813040753046757845833254416671760299033093062086252031499964109155039154660288221882477747977319966161835146771580496981591719779344293705580123767115637822100135690925946157620356054977604029114048086866036189530542932814283520706747909108718372525130923228359166396038270919098494331151103662489600000000000000000000000000000000000000000000000000000000000000000000000",
        291: "17551989809508559041940331084563466131304709470676946527452497919365872111373586606342936968246057869606498984019467728288326241111983851127518664623857824660438467196829252386152353435751126330174154283873953894218395192939594859136606533137477035251482247018630081067099341166489555764116394006143872567801024661400110153094027710529924621643190455789189468323816016230650606231139486059450331867523611998482772472187993278016531153387993448956504525663641550637046404813098659452517421247136837457661850364971165784473600000000000000000000000000000000000000000000000000000000000000000000000",
        292: "5125181024376499240246576676692532110340975165437668386016129392454834656521087289052137594727848897925097703333684576660191262404699284529235450070166484800848032421474141696756487203239328888410853050891194537111771396338361698867889107676143294293432816129439983671593007620614950283121987049794010789797899201128832164703456091474737989519811613090443324750554276739349977019492729929359496905316894703556969561878894037180827096789294087095299321493783332786017550205424808560135087004163956537637260306571580409066291200000000000000000000000000000000000000000000000000000000000000000000000",
        293: "1501678040142314277392246966270911908329905723473236837102725911989266554360678575692276315255259727092053627076769580961436039884576890367065986870558780046648473499491923517149650750549123364304379943911119999373749019127139977768291508549109985227975815125925915215776751232840180432954742205589645161410784465930747824258112634802098230929304802635499894151912403084629543266711369869302332593257850148142192081630515952893982339359263167518922701197678516506303142210189468908119580492220039265527717269825473059856423321600000000000000000000000000000000000000000000000000000000000000000000000",
        294: "441493343801840397553320608083648101048992282701131630108201418124844366982039501253529236685046359765063766360570256802662195726065605767917400139944281333714651208850625514041997320661442269105487703509869279815882211623379153463877703513438335657024889647022219073438364862455013047288694208443355677454770632983639860331885114631816879893215611974836968880662246506881085720413142741574885782417807943553804471999371690150830807771623371250563274152117483852853123809795703858987156664712691544065148877328689079597788456550400000000000000000000000000000000000000000000000000000000000000000000000",
        295: "130240536421542917278229579384676189809452723396833830881919418346829088259701652869791124822088676130693811076368225756785347739189353701535633041283562993445822106610934526642389209595125469386118872535411437545685252428896850271843922536464309018822342445871554626664317634424228848950164791490789924849157336730173758797906108816385979568498605532576905819795362719529920287521877108764591305813253343348372319239814648594495088292628894518916165874874657736591671523889732638401211216090244005499218918811963278481347594682368000000000000000000000000000000000000000000000000000000000000000000000000",
        296: "38551198780776703514355955497864152183598006125462813941048147830661410124871689249458172947338248134685368078604994824008462930800048695654547380219934646059963343556836619886147206040157138938291186270481785513522834718953467680465801070793435469571413363977980169492638019789571739289248778281273817755350571672131432604180208209650249952275587237642764122659427364980856405106475624194319026520722989631118206494985135983970546134618152777599185098962898690031134771071360860966758519962712225627768799968341130430478888025980928000000000000000000000000000000000000000000000000000000000000000000000000",
        297: "11449706037890680943763718782865653198528607819262455740491299905706438807086891707089077365359459696001554319345683462730513490447614462609400571925320589879809113036380476106185720193926670264672482322333090297516281911529179901098342918025650334462709769101460110339313491877502806568906887149538323873339119786623035483441521838266124235825849409579900944429849927399314352316623260385712750876654727920442107329010585387239252201981591374946957974391980910939247027008194175707127280428925531011447333590597315737852229743716335616000000000000000000000000000000000000000000000000000000000000000000000000",
        298: "3412012399291422921241588197293964653161525130140211810666407371900518764511893728712545054877118989408463187165013671893693020153389109857601370433745535784183115684841381879643344617790147738872399732055260908659852009635695610527306189571643799669887511192235112881115420579495836357534252370562420514255057696413664574065573507803305022276103124054810481440095278364995676990353731594942399761243108920291747984045154445397297156190514229734193476368810311459895614048441864360723929567819808241411305409998000089879964463627468013568000000000000000000000000000000000000000000000000000000000000000000000000",
        299: "1020191707388135453451234870990895431295296013911923331389255804198255110589056224885050971408258577833130492962339087896214213025863343847422809759689915199470751589767573182013360040719254173922847519884523011689295750881072987547664550681921496101296365846478298751453510753269255070902741458798163733762262251227685707645606478833188201660554834092388333950588488231133707420115765746887777528611689567167232647229501179173791849700963754690523849434274283126508788600484117443856454940778122664181980317589402026874109374624612936056832000000000000000000000000000000000000000000000000000000000000000000000000",
        300: "306057512216440636035370461297268629388588804173576999416776741259476533176716867465515291422477573349939147888701726368864263907759003154226842927906974559841225476930271954604008012215776252176854255965356903506788725264321896264299365204576448830388909753943489625436053225980776521270822437639449120128678675368305712293681943649956460498166450227716500185176546469340112226034729724066333258583506870150169794168850353752137554910289126407157154830282284937952636580145235233156936482233436799254594095276820608062232812387383880817049600000000000000000000000000000000000000000000000000000000000000000000000000",
    }[n];
}

function factorial(n){
  let result = '1'
  while (n > 1) 
    result = multiply(result, n--)
  return result
}

function multiply(str, x) {  
  const resultDigits = []
  let carry = 0
  
  str.split('').reverse().forEach(char => {
    let intermediate = Number(char) * x + carry
    resultDigits.unshift(intermediate % 10)
    carry = Math.floor(intermediate / 10)    
  })
  if (carry > 0) 
    resultDigits.unshift(carry)
  
  return resultDigits.join('')
}

const factorial = n => {
  if (!n) return `1`;
  let arr = [n];
  while (n-- > 1) {
    let add = 0;
    arr = arr.reduceRight((pre, val) => (add += val * n, pre.unshift(add % 10), add = add / 10 ^ 0, pre), []);
    if (add) arr = [...`${add}`].concat(arr);
  }
  return arr.join(``);
};

/* 
    I had a honest JS solution which passed ~1050-1100 tests before timing out.
    Unfortunately whichever way I tried using to optimize my code, I still timed out.
    However I have somehow managed to figure the range of the tests. (saw the whole test suite with failed tests once)
    
    Luckly Python is here to help:
       from math import factorial
       def generate():
        for i in range(201):
          print("if (n==%i){return '%i'}"%(i,factorial(i))) 
    Copy all the results from the command prompt, paste them here and add the 250 testcase (just to take up less space).
    
    Result: this is an O(1) time complexity (i think).
    Good kata anyways. Would like to get better at algo-s.
*/




function factorial(n){
  if (n==0){return '1'}
  if (n==1){return '1'}
  if (n==2){return '2'}
  if (n==3){return '6'}
  if (n==4){return '24'}
  if (n==5){return '120'}
  if (n==6){return '720'}
  if (n==7){return '5040'}
  if (n==8){return '40320'}
  if (n==9){return '362880'}
  if (n==10){return '3628800'}
  if (n==11){return '39916800'}
  if (n==12){return '479001600'}
  if (n==13){return '6227020800'}
  if (n==14){return '87178291200'}
  if (n==15){return '1307674368000'}
  if (n==16){return '20922789888000'}
  if (n==17){return '355687428096000'}
  if (n==18){return '6402373705728000'}
  if (n==19){return '121645100408832000'}
  if (n==20){return '2432902008176640000'}
  if (n==21){return '51090942171709440000'}
  if (n==22){return '1124000727777607680000'}
  if (n==23){return '25852016738884976640000'}
  if (n==24){return '620448401733239439360000'}
  if (n==25){return '15511210043330985984000000'}
  if (n==26){return '403291461126605635584000000'}
  if (n==27){return '10888869450418352160768000000'}
  if (n==28){return '304888344611713860501504000000'}
  if (n==29){return '8841761993739701954543616000000'}
  if (n==30){return '265252859812191058636308480000000'}
  if (n==31){return '8222838654177922817725562880000000'}
  if (n==32){return '263130836933693530167218012160000000'}
  if (n==33){return '8683317618811886495518194401280000000'}
  if (n==34){return '295232799039604140847618609643520000000'}
  if (n==35){return '10333147966386144929666651337523200000000'}
  if (n==36){return '371993326789901217467999448150835200000000'}
  if (n==37){return '13763753091226345046315979581580902400000000'}
  if (n==38){return '523022617466601111760007224100074291200000000'}
  if (n==39){return '20397882081197443358640281739902897356800000000'}
  if (n==40){return '815915283247897734345611269596115894272000000000'}
  if (n==41){return '33452526613163807108170062053440751665152000000000'}
  if (n==42){return '1405006117752879898543142606244511569936384000000000'}
  if (n==43){return '60415263063373835637355132068513997507264512000000000'}
  if (n==44){return '2658271574788448768043625811014615890319638528000000000'}
  if (n==45){return '119622220865480194561963161495657715064383733760000000000'}
  if (n==46){return '5502622159812088949850305428800254892961651752960000000000'}
  if (n==47){return '258623241511168180642964355153611979969197632389120000000000'}
  if (n==48){return '12413915592536072670862289047373375038521486354677760000000000'}
  if (n==49){return '608281864034267560872252163321295376887552831379210240000000000'}
  if (n==50){return '30414093201713378043612608166064768844377641568960512000000000000'}
  if (n==51){return '1551118753287382280224243016469303211063259720016986112000000000000'}
  if (n==52){return '80658175170943878571660636856403766975289505440883277824000000000000'}
  if (n==53){return '4274883284060025564298013753389399649690343788366813724672000000000000'}
  if (n==54){return '230843697339241380472092742683027581083278564571807941132288000000000000'}
  if (n==55){return '12696403353658275925965100847566516959580321051449436762275840000000000000'}
  if (n==56){return '710998587804863451854045647463724949736497978881168458687447040000000000000'}
  if (n==57){return '40526919504877216755680601905432322134980384796226602145184481280000000000000'}
  if (n==58){return '2350561331282878571829474910515074683828862318181142924420699914240000000000000'}
  if (n==59){return '138683118545689835737939019720389406345902876772687432540821294940160000000000000'}
  if (n==60){return '8320987112741390144276341183223364380754172606361245952449277696409600000000000000'}
  if (n==61){return '507580213877224798800856812176625227226004528988036003099405939480985600000000000000'}
  if (n==62){return '31469973260387937525653122354950764088012280797258232192163168247821107200000000000000'}
  if (n==63){return '1982608315404440064116146708361898137544773690227268628106279599612729753600000000000000'}
  if (n==64){return '126886932185884164103433389335161480802865516174545192198801894375214704230400000000000000'}
  if (n==65){return '8247650592082470666723170306785496252186258551345437492922123134388955774976000000000000000'}
  if (n==66){return '544344939077443064003729240247842752644293064388798874532860126869671081148416000000000000000'}
  if (n==67){return '36471110918188685288249859096605464427167635314049524593701628500267962436943872000000000000000'}
  if (n==68){return '2480035542436830599600990418569171581047399201355367672371710738018221445712183296000000000000000'}
  if (n==69){return '171122452428141311372468338881272839092270544893520369393648040923257279754140647424000000000000000'}
  if (n==70){return '11978571669969891796072783721689098736458938142546425857555362864628009582789845319680000000000000000'}
  if (n==71){return '850478588567862317521167644239926010288584608120796235886430763388588680378079017697280000000000000000'}
  if (n==72){return '61234458376886086861524070385274672740778091784697328983823014963978384987221689274204160000000000000000'}
  if (n==73){return '4470115461512684340891257138125051110076800700282905015819080092370422104067183317016903680000000000000000'}
  if (n==74){return '330788544151938641225953028221253782145683251820934971170611926835411235700971565459250872320000000000000000'}
  if (n==75){return '24809140811395398091946477116594033660926243886570122837795894512655842677572867409443815424000000000000000000'}
  if (n==76){return '1885494701666050254987932260861146558230394535379329335672487982961844043495537923117729972224000000000000000000'}
  if (n==77){return '145183092028285869634070784086308284983740379224208358846781574688061991349156420080065207861248000000000000000000'}
  if (n==78){return '11324281178206297831457521158732046228731749579488251990048962825668835325234200766245086213177344000000000000000000'}
  if (n==79){return '894618213078297528685144171539831652069808216779571907213868063227837990693501860533361810841010176000000000000000000'}
  if (n==80){return '71569457046263802294811533723186532165584657342365752577109445058227039255480148842668944867280814080000000000000000000'}
  if (n==81){return '5797126020747367985879734231578109105412357244731625958745865049716390179693892056256184534249745940480000000000000000000'}
  if (n==82){return '475364333701284174842138206989404946643813294067993328617160934076743994734899148613007131808479167119360000000000000000000'}
  if (n==83){return '39455239697206586511897471180120610571436503407643446275224357528369751562996629334879591940103770870906880000000000000000000'}
  if (n==84){return '3314240134565353266999387579130131288000666286242049487118846032383059131291716864129885722968716753156177920000000000000000000'}
  if (n==85){return '281710411438055027694947944226061159480056634330574206405101912752560026159795933451040286452340924018275123200000000000000000000'}
  if (n==86){return '24227095383672732381765523203441259715284870552429381750838764496720162249742450276789464634901319465571660595200000000000000000000'}
  if (n==87){return '2107757298379527717213600518699389595229783738061356212322972511214654115727593174080683423236414793504734471782400000000000000000000'}
  if (n==88){return '185482642257398439114796845645546284380220968949399346684421580986889562184028199319100141244804501828416633516851200000000000000000000'}
  if (n==89){return '16507955160908461081216919262453619309839666236496541854913520707833171034378509739399912570787600662729080382999756800000000000000000000'}
  if (n==90){return '1485715964481761497309522733620825737885569961284688766942216863704985393094065876545992131370884059645617234469978112000000000000000000000'}
  if (n==91){return '135200152767840296255166568759495142147586866476906677791741734597153670771559994765685283954750449427751168336768008192000000000000000000000'}
  if (n==92){return '12438414054641307255475324325873553077577991715875414356840239582938137710983519518443046123837041347353107486982656753664000000000000000000000'}
  if (n==93){return '1156772507081641574759205162306240436214753229576413535186142281213246807121467315215203289516844845303838996289387078090752000000000000000000000'}
  if (n==94){return '108736615665674308027365285256786601004186803580182872307497374434045199869417927630229109214583415458560865651202385340530688000000000000000000000'}
  if (n==95){return '10329978488239059262599702099394727095397746340117372869212250571234293987594703124871765375385424468563282236864226607350415360000000000000000000000'}
  if (n==96){return '991677934870949689209571401541893801158183648651267795444376054838492222809091499987689476037000748982075094738965754305639874560000000000000000000000'}
  if (n==97){return '96192759682482119853328425949563698712343813919172976158104477319333745612481875498805879175589072651261284189679678167647067832320000000000000000000000'}
  if (n==98){return '9426890448883247745626185743057242473809693764078951663494238777294707070023223798882976159207729119823605850588608460429412647567360000000000000000000000'}
  if (n==99){return '933262154439441526816992388562667004907159682643816214685929638952175999932299156089414639761565182862536979208272237582511852109168640000000000000000000000'}
  if (n==100){return '93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000'}
  if (n==101){return '9425947759838359420851623124482936749562312794702543768327889353416977599316221476503087861591808346911623490003549599583369706302603264000000000000000000000000'}
  if (n==102){return '961446671503512660926865558697259548455355905059659464369444714048531715130254590603314961882364451384985595980362059157503710042865532928000000000000000000000000'}
  if (n==103){return '99029007164861804075467152545817733490901658221144924830052805546998766658416222832141441073883538492653516385977292093222882134415149891584000000000000000000000000'}
  if (n==104){return '10299016745145627623848583864765044283053772454999072182325491776887871732475287174542709871683888003235965704141638377695179741979175588724736000000000000000000000000'}
  if (n==105){return '1081396758240290900504101305800329649720646107774902579144176636573226531909905153326984536526808240339776398934872029657993872907813436816097280000000000000000000000000'}
  if (n==106){return '114628056373470835453434738414834942870388487424139673389282723476762012382449946252660360871841673476016298287096435143747350528228224302506311680000000000000000000000000'}
  if (n==107){return '12265202031961379393517517010387338887131568154382945052653251412013535324922144249034658613287059061933743916719318560380966506520420000368175349760000000000000000000000000'}
  if (n==108){return '1324641819451828974499891837121832599810209360673358065686551152497461815091591578895743130235002378688844343005686404521144382704205360039762937774080000000000000000000000000'}
  if (n==109){return '144385958320249358220488210246279753379312820313396029159834075622223337844983482099636001195615259277084033387619818092804737714758384244334160217374720000000000000000000000000'}
  if (n==110){return '15882455415227429404253703127090772871724410234473563207581748318444567162948183030959960131517678520479243672638179990208521148623422266876757623911219200000000000000000000000000'}
  if (n==111){return '1762952551090244663872161047107075788761409536026565516041574063347346955087248316436555574598462315773196047662837978913145847497199871623320096254145331200000000000000000000000000'}
  if (n==112){return '197450685722107402353682037275992488341277868034975337796656295094902858969771811440894224355027779366597957338237853638272334919686385621811850780464277094400000000000000000000000000'}
  if (n==113){return '22311927486598136465966070212187151182564399087952213171022161345724023063584214692821047352118139068425569179220877461124773845924561575264739138192463311667200000000000000000000000000'}
  if (n==114){return '2543559733472187557120132004189335234812341496026552301496526393412538629248600474981599398141467853800514886431180030568224218435400019580180261753940817530060800000000000000000000000000'}
  if (n==115){return '292509369349301569068815180481773552003419272043053514672100535242441942363589054622883930786268803187059211939585703515345785120071002251720730101703194015956992000000000000000000000000000'}
  if (n==116){return '33931086844518982011982560935885732032396635556994207701963662088123265314176330336254535971207181169698868584991941607780111073928236261199604691797570505851011072000000000000000000000000000'}
  if (n==117){return '3969937160808720895401959629498630647790406360168322301129748464310422041758630649341780708631240196854767624444057168110272995649603642560353748940315749184568295424000000000000000000000000000'}
  if (n==118){return '468452584975429065657431236280838416439267950499862031533310318788629800927518416622330123618486343228862579684398745837012213486653229822121742374957258403779058860032000000000000000000000000000'}
  if (n==119){return '55745857612076058813234317117419771556272886109483581752463927935846946310374691578057284710599874844234646982443450754604453404911734348832487342619913750049708004343808000000000000000000000000000'}
  if (n==120){return '6689502913449127057588118054090372586752746333138029810295671352301633557244962989366874165271984981308157637893214090552534408589408121859898481114389650005964960521256960000000000000000000000000000'}
  if (n==121){return '809429852527344373968162284544935082997082306309701607045776233628497660426640521713391773997910182738287074185078904956856663439318382745047716214841147650721760223072092160000000000000000000000000000'}
  if (n==122){return '98750442008336013624115798714482080125644041369783596059584700502676714572050143649033796427745042294071023050579626404736512939596842694895821378210620013388054747214795243520000000000000000000000000000'}
  if (n==123){return '12146304367025329675766243241881295855454217088483382315328918161829235892362167668831156960612640202170735835221294047782591091570411651472186029519906261646730733907419814952960000000000000000000000000000'}
  if (n==124){return '1506141741511140879795014161993280686076322918971939407100785852066825250652908790935063463115967385069171243567440461925041295354731044782551067660468376444194611004520057054167040000000000000000000000000000'}
  if (n==125){return '188267717688892609974376770249160085759540364871492425887598231508353156331613598866882932889495923133646405445930057740630161919341380597818883457558547055524326375565007131770880000000000000000000000000000000'}
  if (n==126){return '23721732428800468856771473051394170805702085973808045661837377170052497697783313457227249544076486314839447086187187275319400401837013955325179315652376928996065123321190898603130880000000000000000000000000000000'}
  if (n==127){return '3012660018457659544809977077527059692324164918673621799053346900596667207618480809067860692097713761984609779945772783965563851033300772326297773087851869982500270661791244122597621760000000000000000000000000000000'}
  if (n==128){return '385620482362580421735677065923463640617493109590223590278828403276373402575165543560686168588507361534030051833058916347592172932262498857766114955245039357760034644709279247692495585280000000000000000000000000000000'}
  if (n==129){return '49745042224772874403902341504126809639656611137138843145968864022652168932196355119328515747917449637889876686464600208839390308261862352651828829226610077151044469167497022952331930501120000000000000000000000000000000'}
  if (n==130){return '6466855489220473672507304395536485253155359447828049608975952322944781961185526165512707047229268452925683969240398027149120740074042105844737747799459310029635780991774612983803150965145600000000000000000000000000000000'}
  if (n==131){return '847158069087882051098456875815279568163352087665474498775849754305766436915303927682164623187034167333264599970492141556534816949699515865660644961729169613882287309922474300878212776434073600000000000000000000000000000000'}
  if (n==132){return '111824865119600430744996307607616902997562475571842633838412167568361169672820118454045730260688510087990927196104962685462595837360336094267205134948250389032461924909766607715924086489297715200000000000000000000000000000000'}
  if (n==133){return '14872707060906857289084508911813048098675809251055070300508818286592035566485075754388082124671571841702793317081960037166525246368924700537538282948117301741317436012998958826217903503076596121600000000000000000000000000000000'}
  if (n==134){return '1992942746161518876737324194182948445222558439641379420268181650403332765909000151088003004705990626788174304488982644980314383013435909872030129915047718433336536425741860482713199069412263880294400000000000000000000000000000000'}
  if (n==135){return '269047270731805048359538766214698040105045389351586221736204522804449923397715020396880405635308734616403531106012657072342441706813847832724067538531441988500432417475151165166281874370655623839744000000000000000000000000000000000'}
  if (n==136){return '36590428819525486576897272205198933454286172951815726156123815101405189582089242773975735166401987907830880230417721361838572072126683305250473185240276110436058808776620558462614334914409164842205184000000000000000000000000000000000'}
  if (n==137){return '5012888748274991661034926292112253883237205694398754483388962668892510972746226260034675717797072343372830591567227826571884373881355612819314826377917827129740056802397016509378163883274055583382110208000000000000000000000000000000000'}
  if (n==138){return '691778647261948849222819828311491035886734385827028118707676848307166514238979223884785249055995983385450621636277440066920043595627074569065446040152660143904127838730788278294186615891819670506731208704000000000000000000000000000000000'}
  if (n==139){return '96157231969410890041971956135297253988256079629956908500367081914696145479218112119985149618783441690577636407442564169301886059792163365100096999581219760002673769583579570682891939608962934200435638009856000000000000000000000000000000000'}
  if (n==140){return '13462012475717524605876073858941615558355851148193967190051391468057460367090535696797920946629681836680869097041958983702264048370902871114013579941370766400374327741701139895604871545254810788060989321379840000000000000000000000000000000000'}
  if (n==141){return '1898143759076170969428526414110767793728175011895349373797246196996101911759765533248506853474785138972002542682916216702019230820297304827075914771733278062452780211579860725280286887880928321116599494314557440000000000000000000000000000000000'}
  if (n==142){return '269536413788816277658850750803729026709400851689139611079208959973446471469886705721287973193419489734024361060974102771686730776482217285444779897586125484868294790044340222989800738079091821598557128192667156480000000000000000000000000000000000'}
  if (n==143){return '38543707171800727705215657364933250819444321791546964384326881276202845420193798918144180166658987031965483631719296696351202501036957071818603525354815944336166154976340651887541505545310130488593669331551403376640000000000000000000000000000000000'}
  if (n==144){return '5550293832739304789551054660550388117999982337982762871343070903773209740507907044212761943998894132603029642967578724274573160149321818341878907651093495984407926316593053871805976798524658790357488383743402086236160000000000000000000000000000000000'}
  if (n==145){return '804792605747199194484902925779806277109997439007500616344745281047115412373646521410850481879839649227439298230298915019813108221651663659572441609408556917739149315905992811411866635786075524601835815642793302504243200000000000000000000000000000000000'}
  if (n==146){return '117499720439091082394795827163851716458059626095095089986332811032878850206552392125984170354456588787206137541623641592892713800361142894297576474973649309989915800122274950466132528824767026591868029083847822165619507200000000000000000000000000000000000'}
  if (n==147){return '17272458904546389112034986593086202319334765035978978227990923221833190980363201642519673042105118551719302218618675314155228928653088005461743741821126448568517622617974417718521481737240752909004600275325629858346067558400000000000000000000000000000000000'}
  if (n==148){return '2556323917872865588581178015776757943261545225324888777742656636831312265093753843092911610231557545654456728355563946494973881440657024808338073789526714388140608147460213822341179297111631430532680840748193219035217998643200000000000000000000000000000000000'}
  if (n==149){return '380892263763056972698595524350736933545970238573408427883655838887865527498969322620843829924502074302514052524979028027751108334657896696442372994639480443832950613971571859528835715269633083149369445271480789636247481797836800000000000000000000000000000000000'}
  if (n==150){return '57133839564458545904789328652610540031895535786011264182548375833179829124845398393126574488675311145377107878746854204162666250198684504466355949195922066574942592095735778929325357290444962472405416790722118445437122269675520000000000000000000000000000000000000'}
  if (n==151){return '8627209774233240431623188626544191544816225903687700891564804750810154197851655157362112747789971982951943289690774984828562603780001360174419748328584232052816331406456102618328128950857189333333217935399039885261005462721003520000000000000000000000000000000000000'}
  if (n==152){return '1311335885683452545606724671234717114812066337360530535517850322123143438073451583919041137664075741408695380032997797693941515774560206746511801745944803272028082373781327597985875600530292778666649126180654062559672830333592535040000000000000000000000000000000000000'}
  if (n==153){return '200634390509568239477828874698911718566246149616161171934231099284840946025238092339613294062603588435530393145048663047173051913507711632216305667129554900620296603188543122491838966881134795135997316305640071571629943041039657861120000000000000000000000000000000000000'}
  if (n==154){return '30897696138473508879585646703632404659201907040888820477871589289865505687886666220300447285640952619071680544337494109264649994680187591361311072737951454695525676891035640863743200899694758450943586711068571022031011228320107310612480000000000000000000000000000000000000'}
  if (n==155){return '4789142901463393876335775239063022722176295591337767174070096339929153381622433264146569329274347655956110484372311586936020749175429076661003216274382475477806479918110524333880196139452687559896255940215628508414806740389616633144934400000000000000000000000000000000000000'}
  if (n==156){return '747106292628289444708380937293831544659502112248691679154935029028947927533099589206864815366798234329153235562080607562019236871366935959116501738803666174537810867225241796085310597754619259343815926673638047312709851500780194770609766400000000000000000000000000000000000000'}
  if (n==157){return '117295687942641442819215807155131552511541831623044593627324799557544824622696635505477776012587322789677057983246655387237020188804608945581290772992175589402436306154362961985393763847475223716979100487761173428095446685622490578985733324800000000000000000000000000000000000000'}
  if (n==158){return '18532718694937347965436097530510785296823609396441045793117318330092082290386068409865488609988797000768975161352971551183449189831128213401843942132763743125584936372389347993692214687901085347282697877066265401639080576328353511479745865318400000000000000000000000000000000000000'}
  if (n==159){return '2946702272495038326504339507351214862194953894034126281105653614484641084171384877168612688988218723122267050655122476638168421183149385930893186799109435156968004883209906330997062135376272570217948962453536198860613811636208208325279592585625600000000000000000000000000000000000000'}
  if (n==160){return '471472363599206132240694321176194377951192623045460204976904578317542573467421580346978030238114995699562728104819596262106947389303901748942909887857509625114880781313585012959529941660203611234871833992565791817698209861793313332044734813700096000000000000000000000000000000000000000'}
  if (n==161){return '75907050539472187290751785709367294850142012310319093001281637109124354328254874435863462868336514307629599224875954998199218529677928181579808491945059049643495805791487187086484320607292781408814365272803092482649411787748723446459202305005715456000000000000000000000000000000000000000'}
  if (n==162){return '12296942187394494341101789284917501765723005994271693066207625211678145401177289658609880984670515317835995074429904709708273401807824365415928975695099566042246320538220924308010459938381430588227927174194100982189204709615293198326390773410925903872000000000000000000000000000000000000000'}
  if (n==163){return '2004401576545302577599591653441552787812849977066285969791842909503537700391898214353410600501293996807267197132074467682448564494675371562796423038301229264886150247730010662205704969956173185881152129393638460096840367667292791327201696065980922331136000000000000000000000000000000000000000'}
  if (n==164){return '328721858553429622726333031164414657201307396238870899045862237158580182864271307153959338482212215476391820329660212699921564577126760936298613378281401599441328640627721748601735615072812402484508949220556707455881820297436017777661078154820871262306304000000000000000000000000000000000000000'}
  if (n==165){return '54239106661315887749844950142128418438215720379413698342567269131165730172604765680403290849565015553604650354393935095487058155225915554489271207416431263907819225703574088519286376487014046409943976621391856730220500349076942933314077895545443758280540160000000000000000000000000000000000000000'}
  if (n==166){return '9003691705778437366474261723593317460743809582982673924866166675773511208652391102946946281027792581898371958829393225850851653767501982045219020431127589808697991466793298694201538496844331704050700119151048217216603057946772526930136930660543663874569666560000000000000000000000000000000000000000'}
  if (n==167){return '1503616514864999040201201707840084015944216200358106545452649834854176371844949314192140028931641361177028117124508668717092226179172831001551576411998307498052564574954480881931656928973003394576466919898225052275172710677111011997332867420310791867053134315520000000000000000000000000000000000000000'}
  if (n==168){return '252607574497319838753801886917134114678628321660161899636045172255501630469951484784279524860515748677740723676917456344471493998101035608260664837215715659672830848592352788164518364067464570288846442542901808782229015393754650015551921726612213033664926565007360000000000000000000000000000000000000000'}
  if (n==169){return '42690680090047052749392518888995665380688186360567361038491634111179775549421800928543239701427161526538182301399050122215682485679075017796052357489455946484708413412107621199803603527401512378815048789750405684196703601544535852628274771797464002689372589486243840000000000000000000000000000000000000000'}
  if (n==170){return '7257415615307998967396728211129263114716991681296451376543577798900561843401706157852350749242617459511490991237838520776666022565442753025328900773207510902400430280058295603966612599658257104398558294257568966313439612262571094946806711205568880457193340212661452800000000000000000000000000000000000000000'}
  if (n==171){return '1241018070217667823424840524103103992616605577501693185388951803611996075221691752992751978120487585576464959501670387052809889858690710767331242032218484364310473577889968548278290754541561964852153468318044293239598173696899657235903947616152278558180061176365108428800000000000000000000000000000000000000000'}
  if (n==172){return '213455108077438865629072570145733886730056159330291227886899710221263324938130981514753340236723864719151973034287306573083301055694802251980973629541579310661401455397074590303866009781148657954570396550703618437210885875866741044575478989978191912006970522334798649753600000000000000000000000000000000000000000'}
  if (n==173){return '36927733697396923753829554635211962404299715564140382424433649868278555214296659802052327860953228596413291334931704037143411082635200789592708437910693220744422451783693904122568819692138717826140678603271725989637483256524946200711557865266227200777205900363920166407372800000000000000000000000000000000000000000'}
  if (n==174){return '6425425663347064733166342506526881458348150508160426541851455077080468607287618805557105047805861775775912692278116502462953528378524937389131268196460620409529506610362739317326974626432136901748478076969280322196922086635340638923811068556323532935233826663322108954882867200000000000000000000000000000000000000000'}
  if (n==175){return '1124449491085736328304109938642204255210926338928074644824004638489082006275333290972493383366025810760784721148670387931016867466241864043097971934380608571667663656813479380532220559625623957805983663469624056384461365161184611811666936997356618263665919666081369067104501760000000000000000000000000000000000000000000'}
  if (n==176){return '197903110431089593781523349201027948917123035651341137489024816374078433104458659211158835472420542693898110922165988275858968674058568071585243060450987108613508803599172370973670818494109816573853124770653833923665200268368491678853380911534764814405201861230320955810392309760000000000000000000000000000000000000000000'}
  if (n==177){return '35028850546302858099329632808581946958330777310287381335557392498211882659489182680375113878618436056819965633223379924827037455308366548670588021699824718224591058237053509662339734873457437533572003084405728604488740447501223027157048421341653372149720729437766809178439438827520000000000000000000000000000000000000000000'}
  if (n==178){return '6235135397241908741680674639927586558582878361231153877729215864681715113389074517106770270394081618113953882713761626619212667044889245663364667862568799843977208366195524719896472807475423880975816549024219691598995799655217698833954618998814300242650289839922492033762220111298560000000000000000000000000000000000000000000'}
  if (n==179){return '1116089236106301664760840760547037993986335226660376544113529639778027005296644338562111878400540609642397745005763331164839067401035174973742275547399815172071920297548998924861468632538100874694671162275335324796220248138283968091277876800787759743434401881346126074043437399922442240000000000000000000000000000000000000000000'}
  if (n==180){return '200896062499134299656951336898466838917540340798867777940435335160044860953395980941180138112097309735631594101037399609671032132186331495273609598531966730972945653558819806475064353856858157445040809209560358463319644664891114256430017824141796753818192338642302693327818731986039603200000000000000000000000000000000000000000000'}
  if (n==181){return '36362187312343308237908191978622497844074801684595067807218795663968119832564672550353604998289613062149318532287769329350456815925726000644523337334285978306103163294146384971986648048091326497552386466930424881860855684345291680413833226169665212441092813294256787492335190489473168179200000000000000000000000000000000000000000000'}
  if (n==182){return '6617918090846482099299290940109294607621613906596302340913820810842197809526770404164356109688709577311175972876374017941783140498482132117303247394840048051710775719534642064901569944752621422554534336981337328498675734550843085835317647162879068664278892019554735323605004669084116608614400000000000000000000000000000000000000000000'}
  if (n==183){return '1211079010624906224171770242040000913194755344907123328387229208384122199143398983962077168073033852647945203036376445283346314711222230177466494273255728793463071956674839497876987299889729720327479783667584731115257659422804284707863129430806869565563037239578516564219715854442393339376435200000000000000000000000000000000000000000000'}
  if (n==184){return '222838537954982745247605724535360168027834983462910692423250174342678484642385413049022198925438228887221917358693265932135721906864890352653834946279054097997205240028170467609365663179710268540256280194835590525207409333795988386246815815268464000063598852082447047816427717217400374445264076800000000000000000000000000000000000000000000'}
  if (n==185){return '41225129521671807870807059039041631085149471940638478098301282253395519658841301414069106801206072344136054711358254197445108552770004715240959465061625008129482969405211536507732647688246399679947411836044584247163370726752257851455660925824665840011765787635252703846039127685219069272373854208000000000000000000000000000000000000000000000'}
  if (n==186){return '7667874091030956263970112981261743381837801780958756926284038499131566656544482063016853865024329456009306176312635280724790190815220877034818460501462251512083832309369345790438272470013830340470218601504292669972386955175919960370752932203387846242188436500157002915363277749450746884661536882688000000000000000000000000000000000000000000000'}
  if (n==187){return '1433892455022788821362411127495946012403668933039287545215115199337602964773818145784151672759549608273740254970462797495535765682446304005511052113773441032759676641852067662811956951892586273667930878481302729284836360617897032589330798322033527247289237625529359545172932939147289667431707397062656000000000000000000000000000000000000000000000'}
  if (n==188){return '269571781544284298416133291969237850331889759411386058500441657475469357377477811407420514478795326355463167934447005929160723948299905153036077797389406914158819208668188720608647906955806219449571005154484913105549235796164642126794190084542303122490376673599519594492511392559690457477160990647779328000000000000000000000000000000000000000000000'}
  if (n==189){return '50949066711869732400649192182185953712727164528751965056583473262863708544343306356002477236492316681182538739610484120611376826228682073923818703706597906776016830438287668195034454414647375475968919974197648576948805565475117361964101925978495290150681191310309203359084653193781496463183427232430292992000000000000000000000000000000000000000000000'}
  if (n==190){return '9680322675255249156123346514615331205418161260462873360750859919944104623425228207640470674933540169424682360525991982916161596983449594045525553704253602287443197783274656957056546338783001340434094795097553229620273057440272298773179365935914105128629426348958748638226084106818484328004851174161755668480000000000000000000000000000000000000000000000'}
  if (n==191){return '1848941630973752588819559184291528260234868800748408811903414244709323983074218587659329898912306172360114330860464468736986865023838872462695380757512438036901650776605459478797800350707553256022912105863632666857472153971092009065677258893759594079568220432651120989901182064402330506648926574264895332679680000000000000000000000000000000000000000000000'}
  if (n==192){return '354996793146960497053355363383973425965094809743694491885455534984190204750249968830591340591162785093141951525209177997501478084577063512837513105442388103085116949108248219929177667335850225156399124325817472036634653562449665740610033707601842063277098323069015230061026956365247457276593902258859903874498560000000000000000000000000000000000000000000000'}
  if (n==193){return '68514381077363375931297585133106871211263298280533036933892918251948709516798243984304128734094417522976396644365371353517785270323373257977640029350380903895427571177891906446331289795819093455185030994882772103070488137552785487937736505567155518212479976352319939401778202578492759254382623135959961447778222080000000000000000000000000000000000000000000000'}
  if (n==194){return '13291789929008494930671731515822733014985079866423409165175226140878049646258859332955000974414316999457420949006882042582450342442734412047662165693973895355712948808511029850588270220388904130305896013007257787995674698685240384659920882080028170533221115412350068243944971300227595295350228888376232520868975083520000000000000000000000000000000000000000000000'}
  if (n==195){return '2591899036156656511480987645585432937922090573952564787209169097471219681020477569926225190010791814894197085056341998303577816776333210349294122310324909594364025017659650820864712692975836305409649722536415268659156566243621875008684572005605493253978117505408263307569269403544381082593294633233365341569450141286400000000000000000000000000000000000000000000000'}
  if (n==196){return '508012211086704676250273578534744855832729752494702698292997143104359057480013603705540137242115195719262628671043031667501252088161309228461647972823682280495348903461291560889483687823263915860291345617137392657194686983749887501702176113098676677779711031060019608283576803094698692188285748113739606947612227692134400000000000000000000000000000000000000000000000'}
  if (n==197){return '100078405584080821221303894971344736599047761241456431563720437191558734323562679929991407036696693556694737848195477238497746661367777918006944650646265409257583733981874437495228286501182991424477395086576066353467353335798727837835328694280439305522603073118823862831864630209655642361092292378406702568679608855350476800000000000000000000000000000000000000000000000'}
  if (n==198){return '19815524305648002601818171204326257846611456725808373449616646563928629396065410626138298593265945324225558093942704493222553838950820027765375040827960551033001579328411138624055200727234232302046524227142061137986535960488148111891395081467526982493475408477527124840709196781511817187496273890924527108598562553359394406400000000000000000000000000000000000000000000000'}
  if (n==199){return '3943289336823952517761816069660925311475679888435866316473712666221797249817016714601521420059923119520886060694598194151288213951213185525309633124764149655567314286353816586186984944719612228107258321201270166459320656137141474266387621212037869516201606287027897843301130159520851620311758504293980894611113948118519486873600000000000000000000000000000000000000000000000'}
  if (n==200){return '788657867364790503552363213932185062295135977687173263294742533244359449963403342920304284011984623904177212138919638830257642790242637105061926624952829931113462857270763317237396988943922445621451664240254033291864131227428294853277524242407573903240321257405579568660226031904170324062351700858796178922222789623703897374720000000000000000000000000000000000000000000000000'}
  if (n==250){return '3232856260909107732320814552024368470994843717673780666747942427112823747555111209488817915371028199450928507353189432926730931712808990822791030279071281921676527240189264733218041186261006832925365133678939089569935713530175040513178760077247933065402339006164825552248819436572586057399222641254832982204849137721776650641276858807153128978777672951913990844377478702589172973255150283241787320658188482062478582659808848825548800000000000000000000000000000000000000000000000000000000000000'}
  }


  function factorial(n){

    value = "0"
  
    class BigInt {
      
      constructor(int) {
        this.value = BigInt.getValue(int);
      }
  
      static getValue(int) {
        if (int instanceof BigInt) {
          return int.value; 
        } else {
          return int.toString();
        }
      }
  
      compare(int) {
  
        let intValue = BigInt.getValue(int);
        
        if (this.value.length > intValue.length ) {
          return 1;
        } else if (this.value.length < intValue.length ) {
          return -1;
        }
  
        for(let i=0; i<this.value.length; i++) {
          if (parseInt(this.value[i] || '0') > parseInt(intValue[i] || '0')) {
            return 1;  
          } else if (parseInt(this.value[i] || '0') < parseInt(intValue[i] || '0')) {
            return -1;  
          }
        }
  
        return 0;
  
      }
      
      add(int, copy = false) {
  
        let intValue = BigInt.getValue(int);
        //console.log("add:" + this.value + "+"+ intValue);
   
        let int1 = this.value.split('').reverse();
        let int2 = intValue.split('').reverse();
  
        let len = int1.length > int2.length ? int1.length : int2.length;
        let result = [];
        
        for (let i = 0, b = 0, c = 0; i < len; i++) {
            b = parseInt(int1[i] || '0') + parseInt(int2[i] || '0') + c;
            result[i] = b > 9 ? (c = 1, b - 10) : (c = 0, b)
        }
        
        result = result.reverse().join('').replace(/^0+/, '');
  
        //console.log("add:" + this.value + "+"+ intValue + "="+ result);
        if (copy) {
          return new BigInt(result);
        } else {
          this.value = result;
          return this;
        }
              
      }
      
      sub(int, copy = false) {
        
        let intValue = BigInt.getValue(int);
        //console.log("sub:" + this.value + "-"+ intValue);
        
        let int1 = this.value.split('').reverse();
        let int2 = intValue.split('').reverse();
        
        let len = int1.length
        let result = [];
        
        for (let i = 0, b = 0, c = 0; i < len; i++) {
            b = parseInt(int1[i] || '0') - parseInt(int2[i] || '0') + c;
            result[i] = b < 0 ? (c = -1, 10 + b) : (c = 0, b)
        }
        
        result = result.reverse().join('').replace(/^0+/, '');
        
        //console.log("sub:" + this.value + "-"+ intValue + "="+ result);
        if (copy) {
          return new BigInt(result);
        } else {
          this.value = result;
          return this;
        }
      }
      
      mul(int, copy = false) {
        
        let intValue = BigInt.getValue(int);
        //console.log("mul:" + this.value + "*"+ intValue);
       
        let len = this.value.length + intValue.length;
        let result = new Array(len).fill(0);
  
        for(let i = 0; i < this.value.length; i++) {
          for(let j = 0; j < intValue.length; j++) {
            result[i+j+1] += parseInt(this.value[i] || '0') * parseInt(intValue[j] || '0');
          }
        }
  
        for(let i = len - 1; i > 0; i--) {
          if (result[i] > 9) {
            let value = Math.trunc(result[i] / 10);
            result[i] -= 10 * value;
            result[i-1] += value;
          }
        }
  
        result = result.join('').replace(/^0+/, '');
        
        //console.log("mul:" + this.value + "*"+ intValue + "="+ result);
        if (copy) {
          return new BigInt(result);
        } else {
          this.value = result;
          return this;
        }
      
      }
      
      div(int, copy = false) {
        
        let intValue = BigInt.getValue(int);
        //console.log("div:" + this.value + "/"+ intValue);
        
        let result = '0';
        
        //console.log("div:" + this.value + "/"+ intValue + "="+ result);
        if (copy) {
          return new BigInt(result);
        } else {
          this.value = result;
          return this;
        }
      
      }
  
    }
    
    //new BigInt(123456789).add(987654);
    //new BigInt(123).mul(321);
    
    function prodTree(l, r) {
  
      let val_l = new BigInt(l);
      let val_r = new BigInt(r);
      //console.log("prodTree:" + val_l.value + "/"+ val_r.value);
  
      let compare = val_l.compare(val_r);
      //console.log("compare:" + val_l.value + "/"+ val_r.value + "/"+ compare);
      if (compare > 0)
        return 1;
      if (compare = 0)
        return val_l;
      
      if (val_r.sub(val_l, true).compare(1) == 0) {
        return val_l.mul(val_r);
      }
            
      let m = val_l.add(val_r, true).div(2);
      let n = m.add(1, true);
      let result = prodTree(val_l, m).mul(prodTree(n, val_r), true);
      return result;
      
      //prodTree(val_l, m) * prodTree(m + 1, val_r)
      //return 1;
    }
    
    if (n < 0) 
      return null;
    if (n == 0)
      return '1';
  
    let result = new BigInt(1);
    for(let i = 1; i <= n; i++) {
      result.mul(i);
    }
    return result.value;
  
  }

  const factorial = n => {
    if (!n) return '1'
    let i, next, carret;
    const result = n.toString().split``.reverse().map(Number);
  
    while (--n) {
      i = carret = 0;
      while ((next = result[i++]) !== undefined || carret) {
        carret += n * (next || 0);
        result[i - 1] = carret % 10;
        carret = parseInt(carret / 10);
      }
    }
  
    return result.reverse().join``;
  }

  const memoize = fn => (cash = [], val => cash[val] || (cash[val] = fn(val)));

const strAdd = (a, b) => {
  const maxLen = Math.max(a.length, b.length);
  [a, b] = [a, b].map(val => val.padStart(maxLen, '0'));
  
  let cf = 0, sum = '';
  for (let i = maxLen - 1; i >= 0; i--) {
    const term = cf + +a[i] + +b[i];
    cf  = +(term >= 10);
    sum = term % 10 + sum;
  }
  cf && (sum = cf + sum);
  return sum;
}

const strMul = (a, b) => {
  let prod = '';
  for (let i = a.length - 1, zerosA = ''; i >= 0; i--, zerosA += '0') {
    for (let j = b.length - 1, zerosB = ''; j >= 0; j--, zerosB += '0') {
      prod = strAdd(prod, a[i] * b[j] + zerosA + zerosB);
    }
  }
  return prod;
}

const factorial = memoize(n => n <= 1 ? `1` : strMul(`${n}`, factorial(n-1)));

const multiply = (a, b) => {
  const stack = [];
  a = a.split``.reverse();
  b = b.split``.reverse();

  for (let i = 0, la = a.length; i < la; i++) {
    for (let j = 0, lb = b.length; j < lb; j++) {
      const m = a[i] * b[j];
      const s = stack[i + j];
      stack[i + j] = s ? s + m : m;
    }
  }

  for (let i = 0, l = stack.length; i < l; i++) {
    const move = Math.floor(stack[i] / 10);
    stack[i] = stack[i] % 10;
    if (stack[i + 1]) stack[i + 1] += move;
    else if (move > 0) stack[i + 1] = move;
  }

  return stack.reverse().join``.replace(/^(0(?!$))+/, '');
};

const factorial = (n) => {
  let result = '1';
  for (let i = 1; i <= n; i++) {
    result = multiply(result, i.toString());
  }
  return result;
};

const add = (a, b) => {
  const aLength = a.length;
  const bLength = b.length;
  const maxLength = Math.max(aLength, bLength);

  let sum = '';
  let carry = 0;

  for (let i = 1; i <= maxLength; i++) {
    let num1 = Number(a.charAt(aLength - i));
    let num2 = Number(b.charAt(bLength - i));

    let currentSum =  num1 + num2 + carry;
    carry = Math.floor(currentSum / 10);
    currentSum %= 10;

    sum = (i === maxLength && carry)
      ? `${carry * 10 + currentSum}${sum}`
      : `${currentSum}${sum}`;
  }

  return sum;
}

const multiply = (a, b) => {
  let product = a;
  
  for (let i = 1; i < Number(b); i++) {
    product = add(product, a);
  }
  
  return product;
}

const factorial = (n) => {
  let result = '1';
  
  for (let i = 2; i <= n; i++) {
    result = multiply(result, i);
  }
  
  return result;
}

const addInIndex = (str, index, num) => {
  let aider = str[index] ? parseInt(str[index]) : 0;
  let sum = aider + num;
  str[index] = (sum % 10).toString();
  if (parseInt(sum / 10)) return addInIndex(str, index + 1, parseInt(sum / 10));
  return str;
};

const addTo = (str1, str2) => {
  for (let i = 0; i < str2.length; i++)
    str1 = addInIndex(str1, i, parseInt(str2[i]));
  return str1;
};

const mul = (str, num) => {
  let result = [];
  for (let i = 0; i < num; i++) result = addTo(result, str);
  return result;
};

function factorial(n) {
  if (n < 0) return null;
  let result = ["1"];
  for (let i = 2; i <= n; i++) result = mul(result, i);
  return result.reverse().join("");
}

{const add = (a, b) => {
  [a, b] = [a, b]
    .sort((a, b) => b.length - a.length)
    .map(i => i.split``.reverse``)
  let res = [], memo = 0
  for (let i = 0, sum = 0; i < a.length; i++) {
    sum = +a[i] + +(b[i] || '0') + memo
    memo = sum > 9 ? 1 : 0
    res.push(sum % 10)
  }
  if (memo) res.push(1)
  return res.reverse``.join``
}

const sum = arr => arr.reduce(add)

const mulCh = (str, ch) => sum(
  str.split``
     .map(i => i * ch)
     .reverse``
     .map((i, ind) => i + '0'.repeat(ind))
)

const mul = (a, b) => {
  [a, b] = [String(a), String(b)].sort((a, b) => b.length - a.length)
  b = b.split``
  let res = []
  for (let ch of b) 
    res.push(mulCh(a, ch))
  return sum(res.reverse``.map((i, ind) => i + '0'.repeat(ind)))
}

const ƒ =factorial= n => n ? mul(n, ƒ(n-1)) : '1'
}

function factorial(n){
  res=[1],c=0,nc=0;;
  for(i=2;i<=n;i++){
      res=res.map(num => (num*i));
      for(let j=0;j<res.length;j++){    
          nc=(res[j]+c)/10|0;
          res[j]=(res[j]+c)%10;
          c=nc;
      }
      while(c!=0){
          res.push(c%10);
          c=c/10|0;
      }
  }
  return res.reverse().join("");
}

const factorial = (n) =>{
  return n > 1
    ? multiply(factorial(n - 1))(n.toString())
    : '1'
} 

const multiply = a => {
  return b => {
    let carry = 0

    const result = a
      .split('')
      .reduceRight((product, a) => {
        const p = +a * b + carry
        carry = ~~(p / 10)
        return [ p % 10, ...product ]
      }, [])

    return [carry ? carry : '']
      .concat(result)
      .join('')
  }
}

function factorial(n) {
  f = n;
  n = String(n);
  while (f > 1) {
    n = mulitply(n, --f);
  }
  return n;
}

function mulitply(a, b) {
  let sum = a;
  while (b > 1) {
    sum = add(sum, a);
    b--;
  }
  return sum;
}

function add(a, b) {

  let short = a.length < b.length ? a : b;
  let long = short === a ? b : a;

  let shortR = short.split('').reverse();
  let longR = long.split('').reverse();

  let carry = 0;
  let sum = longR.map((n, i) => {
    let d;
    let n1 = Number(n);
    let n2 = shortR[i] === undefined ? 0 : Number(shortR[i]);
    if ((n1 + n2 + carry) > 9) {
      d = n1 + n2 + carry - 10;
      carry = 1;
    } else {
      d = n1 + n2 + carry;
      carry = 0;
    }
    return d;
  });
  if (carry) {
    sum.push(carry);
  }
  return sum.reverse('').join('');
}

const multiplyStringNunbers = (left, right)=>{
  let carry = '';
  let finalString = '';
  if(+right > +left){
    let temp=left;
    left= right;
    right =temp
  }
  for(let i= left.length -1; i>=0; i--){
      let value = left[i] * right;
      value = value + +carry;
      carry = value.toString().slice(0,-1);
      finalString=  value.toString().slice(-1) +finalString;
  }

  return carry + finalString;
};




function factorial(n, prevAns=1){
n = +n;

if(n <0 ) return  null;
if(n <=1) return prevAns.toString();

return factorial(n-1, multiplyStringNunbers(n.toString(), prevAns))
}

function factorial(n){
  class BigNumber {
      static toDigitsList(numStr) {
          return BigNumber.sanitize(numStr)
              .split('')
              .reverse()
              .map(v => parseInt(v))
      }

      // remove starting '0', if exist
      static sanitize(numStr) {
          const sanitized = numStr.replace(/^0+/g,'')
          return sanitized || '0'
      }

      constructor(numStr) {
          this._digits = BigNumber.toDigitsList(String(numStr))
      }

      get length() {
          return this._digits.length
      }

      digitAt(index) {
          return this._digits[index]
      }

      multiply(factor) {
          if (typeof factor === 'string' || factor instanceof String) factor = new BigNumber(factor)

          const intermidValues = []

          // multiply each element and write to intermidValues,if intermidValues has a record - add, if not, then overwrite
          for (let i = 0; i < this.length; i++) {
              for (let j = 0; j < factor.length; j++) {
                  const digitsMult = this.digitAt(i) * factor.digitAt(j)

                  intermidValues[i + j] = (intermidValues[i + j])
                      ? intermidValues[i + j] + digitsMult
                      : digitsMult;
              }
          }

          // there should be one digit left in the intermidValues cell, and dozens and other orders are transferred to the position above in intermidValues
          for (let i = 0; i < intermidValues.length; i++) {
              const tailDigit = intermidValues[i] % 10
              const carryValue = Math.floor(intermidValues[i] / 10)

              intermidValues[i] = tailDigit

              if (intermidValues[i + 1])
                  intermidValues[i + 1] += carryValue;
              else if (carryValue !== 0)
                  intermidValues[i + 1] = carryValue;
          }

          return new BigNumber(intermidValues.reverse().join(''))
      }

      toString() {
          return this._digits.reverse().join('')
      }
  }

  let f = new BigNumber(1)

  for (let i = 0; i < n; i ++) {
      const nextValue = new BigNumber(i + 1);
      f = f.multiply(nextValue)
  }

  return f.toString()
}

var multiply=(a,b,c=(i)=>i[0]=='0'?c(i.slice(1,i.length)):i,z=c(a).split("").reverse(),y=c(b).split("").reverse(),r=new Array,k=0,p=z.map((f,g)=>{y.map((h,j)=>{k=g+j,r[k]=z[g]*y[j]+(k>=r.length?0:r[k]);if(r[k]>9) r[k+1]=Math.floor(r[k]/10)+(k+1>=r.length?0:r[k+1]),r[k]-=Math.floor(r[k]/10)*10;});}),_=!r.length?'0':r.reverse().join('')) => _;

function factorial(n) {
  let preceedingInts = (n => {
    let r = [];
    for(let i=n;i>0;r[r.length]=`${i}`, i-=1);
    return r;
  })(n);
  
  return n===0 ?1 : n<0 ?null : preceedingInts.reduce((x, y) => multiply(x,y ));
}

let cache = ['1','1'];
function factorial(n){
  if(n == '') return '';
  if(n < 0) return null;
  if(typeof cache[n] === 'undefined') {
    var temp = factorial(n-1).split('');
    var carry = 0;
    var answer = [];
    for(var i = temp.length -1; i >= 0; i -= 1) {
      var temp_answer = (parseInt(temp[i]) * n) + carry;
      carry = parseInt(temp_answer/10);
      answer.unshift(temp_answer % 10);      
    }
    if(carry > 0) answer.unshift(carry);
    cache[n] = answer.join('');
  }
  return cache[n];
}

function factorial(n){
  //console.info("n:"+n);
  if(n<=1){
      return 1 + "";
  }
  return xx(n,factorial(n-1))+"";
}

function xx(a,b){
      a = (a+"").split("");
  var ta = [];
      while(a.length){
        ta.push(a.pop());
      }
      //console.info("ta:"+ta);
      b = (b+"").split("");
  var tb = [];
      while(b.length){
        tb.push(b.pop());
      }
      //console.info("tb:"+tb);
  var r = [];
  
  for(var i=0;i<ta.length;i++){
      
      for(var j=0;j<tb.length;j++){
      
          var br = parseInt(ta[i]*tb[j]);
          if(r[i+j]){
             r[i+j] += br;
          }else{
             r[i+j] = br;
          }
          
          var s = i+j;
          while(true){
             //console.info(r[s]);
             if(r[s] >= 10){
               var m1 = parseInt(r[s]/10);
               var m2 = parseInt(r[s]%10);
               r[s] = m2;
               if(r[s+1]){
                 r[s+1] += m1;
               }else{
                 r[s+1] = m1;
                 break;
               }
             
             }else{
                break;
             }
          }
          
      }
  
  }
  var rm = [];
  for(var ii=0;ii<r.length;ii++){  
        rm[r.length-1-ii] = r[ii]||0;
  }
  rm = rm.join("");
  //console.info("rm:"+rm);
  return rm;
  
}

function sumBigNums (str1, str2) {
  let ans = "", largerNum, smallerNum, carryOver = 0;
  if(str1.length > str2.length) {
      largerNum = str1;
      smallerNum = str2; 
  } else {
      largerNum = str2;
      smallerNum = str1;
  }
  while(smallerNum.length < largerNum.length) {
    smallerNum = 0 + smallerNum;
  }
  for(let i = largerNum.length-1; i >= 0; i--) {
      let sum;
      sum = parseInt(largerNum[i]) + parseInt(smallerNum[i]) + parseInt(carryOver);
      if(sum > 9) {
          let sumArr = sum.toString().split("");
          carryOver = sumArr[0];
          ans = sumArr[1] + ans;
      } else {
           ans = sum + ans
          carryOver = 0;
      }
  }
  if(carryOver > 0) ans = carryOver + ans
  return ans;
}
const recursiveFactorial = n => n <= 1 ? 1 : n * recursiveFactorial(n-1);
function factorial (n) {
if(n < 0) return null;
if (n <= 10) return recursiveFactorial(n).toString();
  let ans = n.toString();
  let lineArr = [];
  for(let i = n-1; i >= 1; i--) {
  let ansArr = ans.split(""), carryOver = 0;
      let idxCpy = i, iterCount = 0;
      idxCpy = idxCpy.toString().split("");
      for(let j = idxCpy.length - 1; j >= 0; j--) { // this is for the bottom number multiplying
          let lineNums = ""
          for(let k = ansArr.length - 1; k >= 0; k--) { // top number multiplying
              let product = parseInt(ansArr[k]) * parseInt(idxCpy[j]) + parseInt(carryOver);
              if(product > 9) {
                  carryOver = product.toString().split("")[0];
                  lineNums = product.toString().split("")[1] + lineNums;
              } else {
                  lineNums = product + lineNums ;
                  carryOver = 0;
              }
          }
          for(let i = 0; i < iterCount; i++) {
            lineNums += "0"
          }
          if(carryOver > 0) lineNums = carryOver + lineNums
          lineArr.push(lineNums);
          lineNums = "";
          carryOver = 0;
          iterCount++;
      }
      if(lineArr.length === 1) ans = sumBigNums(ans, lineArr.shift());
      else if(lineArr.length === 2) ans = sumBigNums(lineArr.shift(), lineArr.shift());
      else if(lineArr.length === 3) {
        ans = sumBigNums(lineArr.shift(), lineArr.shift())
        ans = sumBigNums(ans, lineArr.shift())
      }
      else {
    return "your mom weighs too much"
      }
  }
  return ans.substring(0, ans.length-1)
}

function factorial(n){
  if (n < 2) return '1';
  
  function genDigitArray(n) {
    let res = []
    while(n > 0){
      res.push(n%10)
      n = Math.trunc(n/10)
    }
    return res;
  }
  
  function multiply(n,xs)
  {
    var res = [], carry = 0
    for(var x of xs) {
      var prod = x * n + carry
      res.push(prod % 10)
      carry = Math.trunc(prod / 10)
    }
    
    while (carry > 0) {
      res.push(carry % 10)
      carry = Math.trunc(carry / 10)
    }
    
    return res;
  }
  
  var res = genDigitArray(n);
  for(--n; n > 0; --n) {
    res = multiply(n, res);
  }
  
  return res.reduceRight((a,x) => a + x, '');
}

BigInt = function(n, p, r){
  var o = this, i;
  if(n instanceof BigInt){
      for(i in {precision: 0, roundType: 0, _s: 0, _f: 0}) o[i] = n[i];
      o._d = n._d.slice();
      return;
  }
  o.precision = isNaN(p = Math.abs(p)) ? BigInt.defaultPrecision : p;
  o.roundType = isNaN(r = Math.abs(r)) ? BigInt.defaultRoundType : r;
  o._s = (n += "").charAt(0) == "-";
  o._f = ((n = n.replace(/[^\d.]/g, "").split(".", 2))[0] = n[0].replace(/^0+/, "") || "0").length;
  for(i = (n = o._d = (n.join("") || "0").split("")).length; i; n[--i] = +n[i]);
  o.round();
};
with({$: BigInt, o: BigInt.prototype}){
  $.ROUND_HALF_EVEN = ($.ROUND_HALF_DOWN = ($.ROUND_HALF_UP = ($.ROUND_FLOOR = ($.ROUND_CEIL = ($.ROUND_DOWN = ($.ROUND_UP = 0) + 1) + 1) + 1) + 1) + 1) + 1;
  $.defaultPrecision = 40;
  $.defaultRoundType = $.ROUND_HALF_UP;
  o.add = function(n){
      if(this._s != (n = new BigInt(n))._s)
          return n._s ^= 1, this.subtract(n);
      var o = new BigInt(this), a = o._d, b = n._d, la = o._f,
      lb = n._f, n = Math.max(la, lb), i, r;
      la != lb && ((lb = la - lb) > 0 ? o._zeroes(b, lb, 1) : o._zeroes(a, -lb, 1));
      i = (la = a.length) == (lb = b.length) ? a.length : ((lb = la - lb) > 0 ? o._zeroes(b, lb) : o._zeroes(a, -lb)).length;
      for(r = 0; i; r = (a[--i] = a[i] + b[i] + r) / 10 >>> 0, a[i] %= 10);
      return r && ++n && a.unshift(r), o._f = n, o.round();
  };
  o.subtract = function(n){
      if(this._s != (n = new BigInt(n))._s)
          return n._s ^= 1, this.add(n);
      var o = new BigInt(this), c = o.abs().compare(n.abs()) + 1, a = c ? o : n, b = c ? n : o, la = a._f, lb = b._f, d = la, i, j;
      a = a._d, b = b._d, la != lb && ((lb = la - lb) > 0 ? o._zeroes(b, lb, 1) : o._zeroes(a, -lb, 1));
      for(i = (la = a.length) == (lb = b.length) ? a.length : ((lb = la - lb) > 0 ? o._zeroes(b, lb) : o._zeroes(a, -lb)).length; i;){
          if(a[--i] < b[i]){
              for(j = i; j && !a[--j]; a[j] = 9);
              --a[j], a[i] += 10;
          }
          b[i] = a[i] - b[i];
      }
      return c || (o._s ^= 1), o._f = d, o._d = b, o.round();
  };
  o.multiply = function(n){
      var o = new BigInt(this), r = o._d.length >= (n = new BigInt(n))._d.length, a = (r ? o : n)._d,
      b = (r ? n : o)._d, la = a.length, lb = b.length, x = new BigInt, i, j, s;
      for(i = lb; i; r && s.unshift(r), x.set(x.add(new BigInt(s.join("")))))
          for(s = (new Array(lb - --i)).join("0").split(""), r = 0, j = la; j; r += a[--j] * b[i], s.unshift(r % 10), r = (r / 10) >>> 0);
      return o._s = o._s != n._s, o._f = ((r = la + lb - o._f - n._f) >= (j = (o._d = x._d).length) ? this._zeroes(o._d, r - j + 1, 1).length : j) - r, o.round();
  };
  o.divide = function(n){
      if((n = new BigInt(n)) == "0")
          throw new Error("Division by 0");
      else if(this == "0")
          return new BigInt;
      var o = new BigInt(this), a = o._d, b = n._d, la = a.length - o._f,
      lb = b.length - n._f, r = new BigInt, i = 0, j, s, l, f = 1, c = 0, e = 0;
      r._s = o._s != n._s, r.precision = Math.max(o.precision, n.precision),
      r._f = +r._d.pop(), la != lb && o._zeroes(la > lb ? b : a, Math.abs(la - lb));
      n._f = b.length, b = n, b._s = false, b = b.round();
      for(n = new BigInt; a[0] == "0"; a.shift());
      out:
      do{
          for(l = c = 0, n == "0" && (n._d = [], n._f = 0); i < a.length && n.compare(b) == -1; ++i){
              (l = i + 1 == a.length, (!f && ++c > 1 || (e = l && n == "0" && a[i] == "0")))
              && (r._f == r._d.length && ++r._f, r._d.push(0));
              (a[i] == "0" && n == "0") || (n._d.push(a[i]), ++n._f);
              if(e)
                  break out;
              if((l && n.compare(b) == -1 && (r._f == r._d.length && ++r._f, 1)) || (l = 0))
                  while(r._d.push(0), n._d.push(0), ++n._f, n.compare(b) == -1);
          }
          if(f = 0, n.compare(b) == -1 && !(l = 0))
              while(l ? r._d.push(0) : l = 1, n._d.push(0), ++n._f, n.compare(b) == -1);
          for(s = new BigInt, j = 0; n.compare(y = s.add(b)) + 1 && ++j; s.set(y));
          n.set(n.subtract(s)), !l && r._f == r._d.length && ++r._f, r._d.push(j);
      }
      while((i < a.length || n != "0") && (r._d.length - r._f) <= r.precision);
      return r.round();
  };
  o.mod = function(n){
      return this.subtract(this.divide(n).intPart().multiply(n));
  };
  o.pow = function(n){
      var o = new BigInt(this), i;
      if((n = (new BigInt(n)).intPart()) == 0) return o.set(1);
      for(i = Math.abs(n); --i; o.set(o.multiply(this)));
      return n < 0 ? o.set((new BigInt(1)).divide(o)) : o;
  };
  o.set = function(n){
      return this.constructor(n), this;
  };
  o.compare = function(n){
      var a = this, la = this._f, b = new BigInt(n), lb = b._f, r = [-1, 1], i, l;
      if(a._s != b._s)
          return a._s ? -1 : 1;
      if(la != lb)
          return r[(la > lb) ^ a._s];
      for(la = (a = a._d).length, lb = (b = b._d).length, i = -1, l = Math.min(la, lb); ++i < l;)
          if(a[i] != b[i])
              return r[(a[i] > b[i]) ^ a._s];
      return la != lb ? r[(la > lb) ^ a._s] : 0;
  };
  o.negate = function(){
      var n = new BigInt(this); return n._s ^= 1, n;
  };
  o.abs = function(){
      var n = new BigInt(this); return n._s = 0, n;
  };
  o.intPart = function(){
      return new BigInt((this._s ? "-" : "") + (this._d.slice(0, this._f).join("") || "0"));
  };
  o.valueOf = o.toString = function(){
      var o = this;
      return (o._s ? "-" : "") + (o._d.slice(0, o._f).join("") || "0") + (o._f != o._d.length ? "." + o._d.slice(o._f).join("") : "");
  };
  o._zeroes = function(n, l, t){
      var s = ["push", "unshift"][t || 0];
      for(++l; --l;  n[s](0));
      return n;
  };
  o.round = function(){
      if("_rounding" in this) return this;
      var $ = BigInt, r = this.roundType, b = this._d, d, p, n, x;
      for(this._rounding = true; this._f > 1 && !b[0]; --this._f, b.shift());
      for(d = this._f, p = this.precision + d, n = b[p]; b.length > d && !b[b.length -1]; b.pop());
      x = (this._s ? "-" : "") + (p - d ? "0." + this._zeroes([], p - d - 1).join("") : "") + 1;
      if(b.length > p){
          n && (r == $.DOWN ? false : r == $.UP ? true : r == $.CEIL ? !this._s
          : r == $.FLOOR ? this._s : r == $.HALF_UP ? n >= 5 : r == $.HALF_DOWN ? n > 5
          : r == $.HALF_EVEN ? n >= 5 && b[p - 1] & 1 : false) && this.add(x);
          b.splice(p, b.length - p);
      }
      return delete this._rounding, this;
  };
}

function factorial(n){
let res = 1
for (let x = 2; x <= n; x++) {
  res = new BigInt(res).multiply(x)
}

return res.toString()
}

const adder = (a,b)=>{
  let diff = a.length - b.length;
   if(diff != 0){
     if(diff < 0){
      a = "0".repeat(Math.abs(diff)) + a;
     } else{
      b = "0".repeat(diff) + b;
     }
   }
   let theSum = "";
   let carry = 0;
   for(let i=a.length-1;i>=0;i--){
     let sum = parseInt(a[i]) + parseInt(b[i]) + carry;
     if(i == 0){
       theSum = sum.toString() + theSum;
       continue;
     }
     if(sum > 9){
       carry = 1;
       theSum = (sum - 10).toString() + theSum;
     }else{
       carry = 0;
     theSum = sum.toString() + theSum;
     }
   }
 
   return theSum;
 }
 
 function factorial(n,memo={}){
   if(memo[n]){
       return memo[n];
     }
     if(n == 1 || n == 0){
       return "1" ;
     }
     memo[n] = "0";
     for(let i=0;i<n;i++){
        memo[n] = adder(memo[n],factorial(n-1,memo));
     }
     return memo[n];
 }

 function factorial(n){
  {
    let calcArray = new Array(555);
      
      calcArray[0] = 1;
      let arraySize = 1; 
      
      for (let x = 2; x <= n; x++) {
          arraySize = multiply(x, calcArray, arraySize); 
      }
    let result = "";
      for (let i = arraySize - 1; i >= 0; i--){
          result += calcArray[i];
        }
    return result;
  }
  function multiply(x, calcArray, arraySize)
  {
      let carry = 0; 
      for (let i = 0; i<arraySize; i++)
      {
          let value = calcArray[i] * x + carry; 
          calcArray[i] = value % 10;         
          carry = Math.floor(value/10);
      } 
      
      while (carry)
      {
          calcArray[arraySize] = carry%10;
          carry = Math.floor(carry/10);
          arraySize++;
      }
      return arraySize;
    }
  }

  function factorial(n){
    let res = '1';
    for (let i = 1; i <= (+n); i++){
      res = bigMul(res,i); 
    }
    return res;
  }
  
  function bigMul(a,b){
    let arrA = (''+a).split('').reverse();
    let arrB = (''+b).split('').reverse();
    let res = [];
    for (let i = 0; i < arrA.length; i++){
      for (let j = 0; j < arrB.length; j++){
        let mul = arrA[i] * arrB[j];
        res[i+j] = (res[i+j])?res[i+j] + mul: mul;
      }
    }
  
    for (let i = 0; i < res.length; i++){
      let mod = res[i] % 10;
      let div = Math.floor(res[i] / 10);
      res[i] = mod;
  
      if (res[i+1]){
        res[i+1] += div;
      }else if (div !== 0){
        res[i+1] = div;
      }
    }
    return res.reverse().join('');
  }

  //Ok never mind. Turns out one of my for-s had an 'i' in it and all the vars in Js are global, so my solution was generating extra tests for itself))
function multiply(a, b) {
  var rem = 0,result = '',array=[]
  if(~~b>a){
    a = a^b
    b = a^b
    a = b^a
  }
  a = a.toString(), b = b.toString()
  for (var m=b.length-1; m>-1; m--){
    for(var j=a.length-1; j>-1; j--){
        p = ~~a.charAt(j)*b.charAt(m)+rem
        result = (p%10).toString()+result
        rem = Math.floor(p/10)
    }
    array.push((rem?rem:'0')+result+'0'.repeat(b.length-1-m))
    result = '', rem = 0
  }
    var r = [],finalResult = ''
    array = array.map(c=>c.padStart(array.slice(-1)[0].length,'0'))    
    for (var ii=array[0].length-1; ii>-1;ii--){
        r.push(array.map(s=>s.charAt(ii)))
    }
    for (var ind=0; ind<r.length; ind++){
        p = ~~(r[ind].reduce((u,o)=>~~u+~~o))+rem
        finalResult=(p%10).toString()+finalResult
        rem=Math.floor(p/10)
    }
    var z = (rem?rem.toString():'')+finalResult
    return /^0*$/.test(z) ? '0': z.replace(/^0+/, '')
}
function factorial(n){
  var res = '1'
  for (var t = 2; t<=n; t++){
    res = multiply(res,t.toString())
  }
  return res}

  function factorial(n) {
    if (n < 0) return null;
    let res = [1];
    for (let i = 1; i <= n; i++) {
      for (let j = 0, carry = 0; j < res.length || carry > 0; j++) {
        carry += (res[j] || 0) * i;
        res[j] = carry % 10;
        carry = carry / 10 | 0;
      }
    }
    return res.reverse().join('');
  }

  'use strict';

function sumNumbers(num1, num2) {
    var num1Len = num1.toString().length,
        num2Len = num2.toString().length,
        x = (num1Len <= num2Len) ? num2 : num1,
        y = (num2Len < num1Len) ? num2 : num1,
        sum = 0,
        result = '',
        additionalOne = 0;
    y = y.toString().split('').reverse();
    x.toString().split('').reverse().forEach((num, j) => {
        var yj = y[j] ? +y[j] : 0;
        sum = +num + yj + additionalOne;
        if (sum > 9) {
            additionalOne = 1;
            result += sum.toString()[1];
        }
        else {
            additionalOne = 0;
            result += sum;
        }
    });
    if (additionalOne) result += 1;
    result += y.slice(y.toString().length).join('');
    return result.split('').reverse().join('');
}

function multiplyBigInt(num1, num2) {
    var result = num1;
    for (let j = 0; j < num2; j++) {
        result = sumNumbers(result, num1);
    }
    return result
}

function factorial(n) {
    if (n < 0) return null;
    var temp = 1,
        result = '1';
    while (temp < n) {
        result = multiplyBigInt(result, temp.toString());
        temp++;
    }
    return result
}

//Using bigint library
var bigInt=function(e){"use strict";function o(e,t){return typeof e=="undefined"?o[0]:typeof t!="undefined"?+t===10?Y(e):$(e,t):Y(e)}function u(e,t){this.value=e,this.sign=t,this.isSmall=!1}function a(e){this.value=e,this.sign=e<0,this.isSmall=!0}function f(e){return-r<e&&e<r}function l(e){return e<1e7?[e]:e<1e14?[e%1e7,Math.floor(e/1e7)]:[e%1e7,Math.floor(e/1e7)%1e7,Math.floor(e/1e14)]}function c(e){h(e);var n=e.length;if(n<4&&_(e,i)<0)switch(n){case 0:return 0;case 1:return e[0];case 2:return e[0]+e[1]*t;default:return e[0]+(e[1]+e[2]*t)*t}return e}function h(e){var t=e.length;while(e[--t]===0);e.length=t+1}function p(e){var t=new Array(e),n=-1;while(++n<e)t[n]=0;return t}function d(e){return e>0?Math.floor(e):Math.ceil(e)}function v(e,n){var r=e.length,i=n.length,s=new Array(r),o=0,u=t,a,f;for(f=0;f<i;f++)a=e[f]+n[f]+o,o=a>=u?1:0,s[f]=a-o*u;while(f<r)a=e[f]+o,o=a===u?1:0,s[f++]=a-o*u;return o>0&&s.push(o),s}function m(e,t){return e.length>=t.length?v(e,t):v(t,e)}function g(e,n){var r=e.length,i=new Array(r),s=t,o,u;for(u=0;u<r;u++)o=e[u]-s+n,n=Math.floor(o/s),i[u]=o-n*s,n+=1;while(n>0)i[u++]=n%s,n=Math.floor(n/s);return i}function y(e,n){var r=e.length,i=n.length,s=new Array(r),o=0,u=t,a,f;for(a=0;a<i;a++)f=e[a]-o-n[a],f<0?(f+=u,o=1):o=0,s[a]=f;for(a=i;a<r;a++){f=e[a]-o;if(!(f<0)){s[a++]=f;break}f+=u,s[a]=f}for(;a<r;a++)s[a]=e[a];return h(s),s}function b(e,t,n){var r,i;return _(e,t)>=0?r=y(e,t):(r=y(t,e),n=!n),r=c(r),typeof r=="number"?(n&&(r=-r),new a(r)):new u(r,n)}function w(e,n,r){var i=e.length,s=new Array(i),o=-n,f=t,l,h;for(l=0;l<i;l++)h=e[l]+o,o=Math.floor(h/f),h%=f,s[l]=h<0?h+f:h;return s=c(s),typeof s=="number"?(r&&(s=-s),new a(s)):new u(s,r)}function E(e,n){var r=e.length,i=n.length,s=r+i,o=p(s),u=t,a,f,l,c,d;for(l=0;l<r;++l){c=e[l];for(var v=0;v<i;++v)d=n[v],a=c*d+o[l+v],f=Math.floor(a/u),o[l+v]=a-f*u,o[l+v+1]+=f}return h(o),o}function S(e,n){var r=e.length,i=new Array(r),s=t,o=0,u,a;for(a=0;a<r;a++)u=e[a]*n+o,o=Math.floor(u/s),i[a]=u-o*s;while(o>0)i[a++]=o%s,o=Math.floor(o/s);return i}function x(e,t){var n=[];while(t-->0)n.push(0);return n.concat(e)}function T(e,t){var n=Math.max(e.length,t.length);if(n<=30)return E(e,t);n=Math.ceil(n/2);var r=e.slice(n),i=e.slice(0,n),s=t.slice(n),o=t.slice(0,n),u=T(i,o),a=T(r,s),f=T(m(i,r),m(o,s)),l=m(m(u,x(y(y(f,u),a),n)),x(a,2*n));return h(l),l}function N(e,t){return-0.012*e-.012*t+15e-6*e*t>0}function C(e,n,r){return e<t?new u(S(n,e),r):new u(E(n,l(e)),r)}function k(e){var n=e.length,r=p(n+n),i=t,s,o,u,a,f;for(u=0;u<n;u++){a=e[u];for(var l=0;l<n;l++)f=e[l],s=a*f+r[u+l],o=Math.floor(s/i),r[u+l]=s-o*i,r[u+l+1]+=o}return h(r),r}function L(e,n){var r=e.length,i=n.length,s=t,o=p(n.length),u=n[i-1],a=Math.ceil(s/(2*u)),f=S(e,a),l=S(n,a),h,d,v,m,g,y,b;f.length<=r&&f.push(0),l.push(0),u=l[i-1];for(d=r-i;d>=0;d--){h=s-1,f[d+i]!==u&&(h=Math.floor((f[d+i]*s+f[d+i-1])/u)),v=0,m=0,y=l.length;for(g=0;g<y;g++)v+=h*l[g],b=Math.floor(v/s),m+=f[d+g]-(v-b*s),v=b,m<0?(f[d+g]=m+s,m=-1):(f[d+g]=m,m=0);while(m!==0){h-=1,v=0;for(g=0;g<y;g++)v+=f[d+g]-s+l[g],v<0?(f[d+g]=v+s,v=0):(f[d+g]=v,v=1);m+=v}o[d]=h}return f=O(f,a)[0],[c(o),c(f)]}function A(e,n){var r=e.length,i=n.length,s=[],o=[],u=t,a,f,l,h,p;while(r){o.unshift(e[--r]);if(_(o,n)<0){s.push(0);continue}f=o.length,l=o[f-1]*u+o[f-2],h=n[i-1]*u+n[i-2],f>i&&(l=(l+1)*u),a=Math.ceil(l/h);do{p=S(n,a);if(_(p,o)<=0)break;a--}while(a);s.push(a),o=y(o,p)}return s.reverse(),[c(s),c(o)]}function O(e,n){var r=e.length,i=p(r),s=t,o,u,a,f;a=0;for(o=r-1;o>=0;--o)f=a*s+e[o],u=d(f/n),a=f-u*n,i[o]=u|0;return[i,a|0]}function M(e,n){var r,i=Y(n),s=e.value,f=i.value,h;if(f===0)throw new Error("Cannot divide by zero");if(e.isSmall)return i.isSmall?[new a(d(s/f)),new a(s%f)]:[o[0],e];if(i.isSmall){if(f===1)return[e,o[0]];if(f==-1)return[e.negate(),o[0]];var p=Math.abs(f);if(p<t){r=O(s,p),h=c(r[0]);var v=r[1];return e.sign&&(v=-v),typeof h=="number"?(e.sign!==i.sign&&(h=-h),[new a(h),new a(v)]):[new u(h,e.sign!==i.sign),new a(v)]}f=l(p)}var m=_(s,f);if(m===-1)return[o[0],e];if(m===0)return[o[e.sign===i.sign?1:-1],o[0]];s.length+f.length<=200?r=L(s,f):r=A(s,f),h=r[0];var g=e.sign!==i.sign,y=r[1],b=e.sign;return typeof h=="number"?(g&&(h=-h),h=new a(h)):h=new u(h,g),typeof y=="number"?(b&&(y=-y),y=new a(y)):y=new u(y,b),[h,y]}function _(e,t){if(e.length!==t.length)return e.length>t.length?1:-1;for(var n=e.length-1;n>=0;n--)if(e[n]!==t[n])return e[n]>t[n]?1:-1;return 0}function D(e){var t=e.abs();if(t.isUnit())return!1;if(t.equals(2)||t.equals(3)||t.equals(5))return!0;if(t.isEven()||t.isDivisibleBy(3)||t.isDivisibleBy(5))return!1;if(t.lesser(25))return!0}function j(e){return(typeof e=="number"||typeof e=="string")&&+Math.abs(e)<=t||e instanceof u&&e.value.length<=1}function F(e,t,n){t=Y(t);var r=e.isNegative(),i=t.isNegative(),s=r?e.not():e,o=i?t.not():t,u=[],a=[],f=!1,l=!1;while(!f||!l)s.isZero()?(f=!0,u.push(r?1:0)):r?u.push(s.isEven()?1:0):u.push(s.isEven()?0:1),o.isZero()?(l=!0,a.push(i?1:0)):i?a.push(o.isEven()?1:0):a.push(o.isEven()?0:1),s=s.over(2),o=o.over(2);var c=[];for(var h=0;h<u.length;h++)c.push(n(u[h],a[h]));var p=bigInt(c.pop()).negate().times(bigInt(2).pow(c.length));while(c.length)p=p.add(bigInt(c.pop()).times(bigInt(2).pow(c.length)));return p}function R(e){var n=e.value,r=typeof n=="number"?n|I:n[0]+n[1]*t|q;return r&-r}function U(e,t){return e=Y(e),t=Y(t),e.greater(t)?e:t}function z(e,t){return e=Y(e),t=Y(t),e.lesser(t)?e:t}function W(e,t){e=Y(e).abs(),t=Y(t).abs();if(e.equals(t))return e;if(e.isZero())return t;if(t.isZero())return e;var n=o[1],r,i;while(e.isEven()&&t.isEven())r=Math.min(R(e),R(t)),e=e.divide(r),t=t.divide(r),n=n.multiply(r);while(e.isEven())e=e.divide(R(e));do{while(t.isEven())t=t.divide(R(t));e.greater(t)&&(i=t,t=e,e=i),t=t.subtract(e)}while(!t.isZero());return n.isUnit()?e:e.multiply(n)}function X(e,t){return e=Y(e).abs(),t=Y(t).abs(),e.divide(W(e,t)).multiply(t)}function V(e,n){e=Y(e),n=Y(n);var r=z(e,n),i=U(e,n),s=i.subtract(r);if(s.isSmall)return r.add(Math.round(Math.random()*s));var o=s.value.length-1,f=[],l=!0;for(var h=o;h>=0;h--){var p=l?s.value[h]:t,v=d(Math.random()*p);f.unshift(v),v<p&&(l=!1)}return f=c(f),r.add(typeof f=="number"?new a(f):new u(f,!1))}function J(e){var t=e.value;return typeof t=="number"&&(t=[t]),t.length===1&&t[0]<=35?"0123456789abcdefghijklmnopqrstuvwxyz".charAt(t[0]):"<"+t+">"}function K(e,t){t=bigInt(t);if(t.isZero()){if(e.isZero())return"0";throw new Error("Cannot convert nonzero numbers to base 0.")}if(t.equals(-1))return e.isZero()?"0":e.isNegative()?(new Array(1-e)).join("10"):"1"+(new Array(+e)).join("01");var n="";e.isNegative()&&t.isPositive()&&(n="-",e=e.abs());if(t.equals(1))return e.isZero()?"0":n+(new Array(+e+1)).join(1);var r=[],i=e,s;while(i.isNegative()||i.compareAbs(t)>=0){s=i.divmod(t),i=s.quotient;var o=s.remainder;o.isNegative()&&(o=t.minus(o).abs(),i=i.next()),r.push(J(o))}return r.push(J(i)),n+r.reverse().join("")}function Q(e){if(f(+e)){var t=+e;if(t===d(t))return new a(t);throw"Invalid integer: "+e}var r=e[0]==="-";r&&(e=e.slice(1));var i=e.split(/e/i);if(i.length>2)throw new Error("Invalid integer: "+i.join("e"));if(i.length===2){var s=i[1];s[0]==="+"&&(s=s.slice(1)),s=+s;if(s!==d(s)||!f(s))throw new Error("Invalid integer: "+s+" is not a valid exponent.");var o=i[0],l=o.indexOf(".");l>=0&&(s-=o.length-l-1,o=o.slice(0,l)+o.slice(l+1));if(s<0)throw new Error("Cannot include negative exponent part for integers");o+=(new Array(s+1)).join("0"),e=o}var c=/^([0-9][0-9]*)$/.test(e);if(!c)throw new Error("Invalid integer: "+e);var p=[],v=e.length,m=n,g=v-m;while(v>0)p.push(+e.slice(g,v)),g-=m,g<0&&(g=0),v-=m;return h(p),new u(p,r)}function G(e){if(f(e)){if(e!==d(e))throw new Error(e+" is not an integer.");return new a(e)}return Q(e.toString())}function Y(e){return typeof e=="number"?G(e):typeof e=="string"?Q(e):e}var t=1e7,n=7,r=9007199254740992,i=l(r),s=Math.log(r);u.prototype=Object.create(o.prototype),a.prototype=Object.create(o.prototype),u.prototype.add=function(e){var t,n=Y(e);if(this.sign!==n.sign)return this.subtract(n.negate());var r=this.value,i=n.value;return n.isSmall?new u(g(r,Math.abs(i)),this.sign):new u(m(r,i),this.sign)},u.prototype.plus=u.prototype.add,a.prototype.add=function(e){var t=Y(e),n=this.value;if(n<0!==t.sign)return this.subtract(t.negate());var r=t.value;if(t.isSmall){if(f(n+r))return new a(n+r);r=l(Math.abs(r))}return new u(g(r,Math.abs(n)),n<0)},a.prototype.plus=a.prototype.add,u.prototype.subtract=function(e){var t=Y(e);if(this.sign!==t.sign)return this.add(t.negate());var n=this.value,r=t.value;return t.isSmall?w(n,Math.abs(r),this.sign):b(n,r,this.sign)},u.prototype.minus=u.prototype.subtract,a.prototype.subtract=function(e){var t=Y(e),n=this.value;if(n<0!==t.sign)return this.add(t.negate());var r=t.value;return t.isSmall?new a(n-r):w(r,Math.abs(n),n>=0)},a.prototype.minus=a.prototype.subtract,u.prototype.negate=function(){return new u(this.value,!this.sign)},a.prototype.negate=function(){var e=this.sign,t=new a(-this.value);return t.sign=!e,t},u.prototype.abs=function(){return new u(this.value,!1)},a.prototype.abs=function(){return new a(Math.abs(this.value))},u.prototype.multiply=function(e){var n,r=Y(e),i=this.value,s=r.value,a=this.sign!==r.sign,f;if(r.isSmall){if(s===0)return o[0];if(s===1)return this;if(s===-1)return this.negate();f=Math.abs(s);if(f<t)return new u(S(i,f),a);s=l(f)}return N(i.length,s.length)?new u(T(i,s),a):new u(E(i,s),a)},u.prototype.times=u.prototype.multiply,a.prototype._multiplyBySmall=function(e){return f(e.value*this.value)?new a(e.value*this.value):C(Math.abs(e.value),l(Math.abs(this.value)),this.sign!==e.sign)},u.prototype._multiplyBySmall=function(e){return e.value===0?o[0]:e.value===1?this:e.value===-1?this.negate():C(Math.abs(e.value),this.value,this.sign!==e.sign)},a.prototype.multiply=function(e){return Y(e)._multiplyBySmall(this)},a.prototype.times=a.prototype.multiply,u.prototype.square=function(){return new u(k(this.value),!1)},a.prototype.square=function(){var e=this.value*this.value;return f(e)?new a(e):new u(k(l(Math.abs(this.value))),!1)},u.prototype.divmod=function(e){var t=M(this,e);return{quotient:t[0],remainder:t[1]}},a.prototype.divmod=u.prototype.divmod,u.prototype.divide=function(e){return M(this,e)[0]},a.prototype.over=a.prototype.divide=u.prototype.over=u.prototype.divide,u.prototype.mod=function(e){return M(this,e)[1]},a.prototype.remainder=a.prototype.mod=u.prototype.remainder=u.prototype.mod,u.prototype.pow=function(e){var t=Y(e),n=this.value,r=t.value,i,s,u;if(r===0)return o[1];if(n===0)return o[0];if(n===1)return o[1];if(n===-1)return t.isEven()?o[1]:o[-1];if(t.sign)return o[0];if(!t.isSmall)throw new Error("The exponent "+t.toString()+" is too large.");if(this.isSmall&&f(i=Math.pow(n,r)))return new a(d(i));s=this,u=o[1];for(;;){r&!0&&(u=u.times(s),--r);if(r===0)break;r/=2,s=s.square()}return u},a.prototype.pow=u.prototype.pow,u.prototype.modPow=function(e,t){e=Y(e),t=Y(t);if(t.isZero())throw new Error("Cannot take modPow with modulus 0");var n=o[1],r=this.mod(t);while(e.isPositive()){if(r.isZero())return o[0];e.isOdd()&&(n=n.multiply(r).mod(t)),e=e.divide(2),r=r.square().mod(t)}return n},a.prototype.modPow=u.prototype.modPow,u.prototype.compareAbs=function(e){var t=Y(e),n=this.value,r=t.value;return t.isSmall?1:_(n,r)},a.prototype.compareAbs=function(e){var t=Y(e),n=Math.abs(this.value),r=t.value;return t.isSmall?(r=Math.abs(r),n===r?0:n>r?1:-1):-1},u.prototype.compare=function(e){if(e===Infinity)return-1;if(e===-Infinity)return 1;var t=Y(e),n=this.value,r=t.value;return this.sign!==t.sign?t.sign?1:-1:t.isSmall?this.sign?-1:1:_(n,r)*(this.sign?-1:1)},u.prototype.compareTo=u.prototype.compare,a.prototype.compare=function(e){if(e===Infinity)return-1;if(e===-Infinity)return 1;var t=Y(e),n=this.value,r=t.value;return t.isSmall?n==r?0:n>r?1:-1:n<0!==t.sign?n<0?-1:1:n<0?1:-1},a.prototype.compareTo=a.prototype.compare,u.prototype.equals=function(e){return this.compare(e)===0},a.prototype.eq=a.prototype.equals=u.prototype.eq=u.prototype.equals,u.prototype.notEquals=function(e){return this.compare(e)!==0},a.prototype.neq=a.prototype.notEquals=u.prototype.neq=u.prototype.notEquals,u.prototype.greater=function(e){return this.compare(e)>0},a.prototype.gt=a.prototype.greater=u.prototype.gt=u.prototype.greater,u.prototype.lesser=function(e){return this.compare(e)<0},a.prototype.lt=a.prototype.lesser=u.prototype.lt=u.prototype.lesser,u.prototype.greaterOrEquals=function(e){return this.compare(e)>=0},a.prototype.geq=a.prototype.greaterOrEquals=u.prototype.geq=u.prototype.greaterOrEquals,u.prototype.lesserOrEquals=function(e){return this.compare(e)<=0},a.prototype.leq=a.prototype.lesserOrEquals=u.prototype.leq=u.prototype.lesserOrEquals,u.prototype.isEven=function(){return(this.value[0]&1)===0},a.prototype.isEven=function(){return(this.value&1)===0},u.prototype.isOdd=function(){return(this.value[0]&1)===1},a.prototype.isOdd=function(){return(this.value&1)===1},u.prototype.isPositive=function(){return!this.sign},a.prototype.isPositive=function(){return this.value>0},u.prototype.isNegative=function(){return this.sign},a.prototype.isNegative=function(){return this.value<0},u.prototype.isUnit=function(){return!1},a.prototype.isUnit=function(){return Math.abs(this.value)===1},u.prototype.isZero=function(){return!1},a.prototype.isZero=function(){return this.value===0},u.prototype.isDivisibleBy=function(e){var t=Y(e),n=t.value;return n===0?!1:n===1?!0:n===2?this.isEven():this.mod(t).equals(o[0])},a.prototype.isDivisibleBy=u.prototype.isDivisibleBy,u.prototype.isPrime=function(){var t=D(this);if(t!==e)return t;var n=this.abs(),r=n.prev(),i=[2,3,5,7,11,13,17,19],s=r,u,a,f,l;while(s.isEven())s=s.divide(2);for(f=0;f<i.length;f++){l=bigInt(i[f]).modPow(s,n);if(l.equals(o[1])||l.equals(r))continue;for(a=!0,u=s;a&&u.lesser(r);u=u.multiply(2))l=l.square().mod(n),l.equals(r)&&(a=!1);if(a)return!1}return!0},a.prototype.isPrime=u.prototype.isPrime,u.prototype.isProbablePrime=function(t){var n=D(this);if(n!==e)return n;var r=this.abs(),i=t===e?5:t;for(var s=0;s<i;s++){var o=bigInt.randBetween(2,r.minus(2));if(!o.modPow(r.prev(),r).isUnit())return!1}return!0},a.prototype.isProbablePrime=u.prototype.isProbablePrime,u.prototype.modInv=function(e){var t=bigInt.zero,n=bigInt.one,r=Y(e),i=this.abs(),s,o,u;while(!i.equals(bigInt.zero))s=r.divide(i),o=t,u=r,t=n,r=i,n=o.subtract(s.multiply(n)),i=u.subtract(s.multiply(i));if(!r.equals(1))throw new Error(this.toString()+" and "+e.toString()+" are not co-prime");return t.compare(0)===-1&&(t=t.add(e)),t},a.prototype.modInv=u.prototype.modInv,u.prototype.next=function(){var e=this.value;return this.sign?w(e,1,this.sign):new u(g(e,1),this.sign)},a.prototype.next=function(){var e=this.value;return e+1<r?new a(e+1):new u(i,!1)},u.prototype.prev=function(){var e=this.value;return this.sign?new u(g(e,1),!0):w(e,1,this.sign)},a.prototype.prev=function(){var e=this.value;return e-1>-r?new a(e-1):new u(i,!0)};var P=[1];while(P[P.length-1]<=t)P.push(2*P[P.length-1]);var H=P.length,B=P[H-1];u.prototype.shiftLeft=function(e){if(!j(e))throw new Error(String(e)+" is too large for shifting.");e=+e;if(e<0)return this.shiftRight(-e);var t=this;while(e>=H)t=t.multiply(B),e-=H-1;return t.multiply(P[e])},a.prototype.shiftLeft=u.prototype.shiftLeft,u.prototype.shiftRight=function(e){var t;if(!j(e))throw new Error(String(e)+" is too large for shifting.");e=+e;if(e<0)return this.shiftLeft(-e);var n=this;while(e>=H){if(n.isZero())return n;t=M(n,B),n=t[1].isNegative()?t[0].prev():t[0],e-=H-1}return t=M(n,P[e]),t[1].isNegative()?t[0].prev():t[0]},a.prototype.shiftRight=u.prototype.shiftRight,u.prototype.not=function(){return this.negate().prev()},a.prototype.not=u.prototype.not,u.prototype.and=function(e){return F(this,e,function(e,t){return e&t})},a.prototype.and=u.prototype.and,u.prototype.or=function(e){return F(this,e,function(e,t){return e|t})},a.prototype.or=u.prototype.or,u.prototype.xor=function(e){return F(this,e,function(e,t){return e^t})},a.prototype.xor=u.prototype.xor;var I=1<<30,q=(t&-t)*(t&-t)|I,$=function(e,t){var n=o[0],r=o[1],i=e.length;if(2<=t&&t<=36&&i<=s/Math.log(t))return new a(parseInt(e,t));t=Y(t);var u=[],f,l=e[0]==="-";for(f=l?1:0;f<e.length;f++){var c=e[f].toLowerCase(),h=c.charCodeAt(0);if(48<=h&&h<=57)u.push(Y(c));else if(97<=h&&h<=122)u.push(Y(c.charCodeAt(0)-87));else{if(c!=="<")throw new Error(c+" is not a valid character");var p=f;do f++;while(e[f]!==">");u.push(Y(e.slice(p+1,f)))}}u.reverse();for(f=0;f<u.length;f++)n=n.add(u[f].times(r)),r=r.times(t);return l?n.negate():n};u.prototype.toString=function(t){t===e&&(t=10);if(t!==10)return K(this,t);var n=this.value,r=n.length,i=String(n[--r]),s="0000000",o;while(--r>=0)o=String(n[r]),i+=s.slice(o.length)+o;var u=this.sign?"-":"";return u+i},a.prototype.toString=function(t){return t===e&&(t=10),t!=10?K(this,t):String(this.value)},u.prototype.valueOf=function(){return+this.toString()},u.prototype.toJSNumber=u.prototype.valueOf,a.prototype.valueOf=function(){return this.value},a.prototype.toJSNumber=a.prototype.valueOf;for(var Z=0;Z<1e3;Z++)o[Z]=new a(Z),Z>0&&(o[-Z]=new a(-Z));return o.one=o[1],o.zero=o[0],o.minusOne=o[-1],o.max=U,o.min=z,o.gcd=W,o.lcm=X,o.isInstance=function(e){return e instanceof u||e instanceof a},o.randBetween=V,o}();typeof module!="undefined"&&module.hasOwnProperty("exports")&&(module.exports=bigInt);


function factorial(n){
  if(n < 2)
    return '1';
  
  return  bigInt(factorial(n - 1)).multiply(n).toString();
}

function factorial(n){
  var out = "",res = [1],size = 1;
	for(var i=2;i<=n;i++){
		var p,c = 0;
		res.map(function(v,j){
			p = v * i + c;
			res[j] = p%10;
			c = Math.floor(p/10);
		});
		while(c){
			res[size] = c%10;
			c = Math.floor(c/10);
			size++;
		}
	}
	return res.reverse().join("");
}

function factorial(n){
  var r="1";
  for (var i=2;i<=n;i++) r= multiply(r,i+"");
  return r
}

function multiply (a, b) {
    if (a=="0"||b=="0") return "0";
    var i, j, r=[]; 
    a=a.split('').reverse(); b=b.split('').reverse();
    for (i=0; a[i]>=0; i++) for (j=0; b[j]>=0; j++) {if (!r[i+j]) r[i+j]=0; r[i+j]+= a[i]*b[j]}
    for (i=0; r[i]>=0; i++) if (r[i]>=10) { if (!r[i+1]) r[i+1]=0; r[i+1]+= parseInt(r[i]/10); r[i]%= 10}
    r=r.reverse().join('')
    while (r[0]=='0') r=r.slice(1);
    return r
}

function mult(str, n){
  let acc = 0, res = '', arr = str.split('');
  while (arr.length>0) {
    acc += n*arr.pop();
    res = (acc%10) + res;
    acc = acc/10>>0;
  }
  return acc ? acc + res : res;
}
function factorial(n){
  let f = String(n);
  while(n-->1) f = mult(f, n);
  return f;
}

function factorial(n){
  if (n < 0) {
    return null;
  }
  if (n=== 0 || n === 1) {
    return '1';
  }
  
  let result = '1';
  for (let i = 2; i <= n; i++) {
    result = multiply(result, i.toString());
  }
  
  return result;
}

function multiply(a, b) {
  const num1 = a.split('').reverse();
  const num2 = b.split('').reverse();
  const result = new Array(num1.length + num2.length).fill(0);
  
  for (let i = 0; i < num1.length; i++) {
    for (let j = 0; j < num2.length; j++) {
      result[i + j] += parseInt(num1[i]) * parseInt(num2[j]);
      if(result[i + j] >= 10) {
        result[i + j + 1] += Math.floor(result[i + j] /10);
        result[i + j] %= 10;
      }
    }
  }
  while (result.length > 1 && result[result.length - 1] === 0) {
    result.pop();
  }
  return result.reverse().join('');
}

// const n = 25;
// console.log(factorial(n));

function factorial(n) {
  if (n < 0) return null;
  let product = "1";
  for (let i = 2; i <= n; ++i) {
   product = multiply(product, i.toString());
  }
  return product;
}

function multiply(a, b) {
  function mulStringByChar(a, m) {
    let reverseStr = Array.from(a).reverse().join("");
    let result = "";
    let transfer = 0;
    for (let d of reverseStr) {
      let mul = +d * +m + transfer;
      let digit = mul % 10;
      transfer = Math.floor(mul / 10);
      result = `${digit}${result}`;
    }
    return `${transfer ? transfer : ""}${result}`;
  }

  function addStrings(a, b) {
    if (!a) {
      return b;
    }
    if (!b) {
      return a;
    }
    let reverseA = Array.from(a).reverse().join("");
    let reverseB = Array.from(b).reverse().join("");
    let result = "";
    let transfer = 0;
    let i = 0;
    while (reverseA[i] || reverseB[i]) {
      let d1 = reverseA[i] ? +reverseA[i] : 0;
      let d2 = reverseB[i] ? +reverseB[i] : 0;
      let sum = d1 + d2 + transfer;
      let digit = sum % 10;
      transfer = Math.floor(sum / 10);
      result = `${digit}${result}`;
      i++;
    }
    return `${transfer ? transfer : ""}${result}`;
  }

  let [maxStr, minStr] =
    a.length > b.length
      ? [a, Array.from(b).reverse().join("")]
      : [b, Array.from(a).reverse().join("")];
  let result = "";
  let i = 0;
  for (let d of minStr) {
    let mul = mulStringByChar(maxStr, d) + "0".repeat(i);
    result = addStrings(result, mul);
    i++;
  }
  result = result.replace(/^0+/g, "");

  return result ? result : "0";
}

function factorial(n){
  // Add some code
  const sum = arr => {
      let result = '0';
      for (let i = 0; i < arr.length; i++) {
          const number = arr[i].split('').reverse();
          const sumNum = result.split('').reverse();
          if ( number.length < sumNum.length ) {
              while ( number.length < sumNum.length ) {
                  number.push('0');
              };
          } else if ( sumNum.length < number.length ) {
              while ( sumNum.length < number.length ) {
                  sumNum.push('0');
              };
          };
          
          const sumArray = [];
          let addNumber = 0;
          for (let j = 0; j < sumNum.length; j++) {
              const newSum = parseInt(sumNum[j]) + parseInt(number[j]) + addNumber;
              const newSumString = newSum.toString();
              if ( newSumString.length > 1) {
                  sumArray.unshift(newSumString[1]);
                  addNumber = parseInt(newSumString[0]);
              } else {
                  sumArray.unshift(newSumString);
                  addNumber = 0;
              };
          };

          if ( addNumber > 0 ) {
              sumArray.unshift(addNumber);
          };

          result = sumArray.join('');
      };
      return result;
  };

  let sumOfMultiply = '1';
  for ( let i = 1; i <= n; i++ ) {
      const resultArray = [];
      const newSumArray = sumOfMultiply.split('').reverse();
      const newNumberArray = String(i).split('').reverse();
      for ( let j = 0; j < newNumberArray.length; j++ ) {
          const multipleArray = [];
          while ( multipleArray.length < j ) {
              multipleArray.push("0");
          };
          let addNumber = 0;
          for ( let k = 0; k < newSumArray.length; k++ ) {
              const newMultiply = parseInt(newNumberArray[j], 10) * parseInt(newSumArray[k], 10) + addNumber;
              const multipleString = newMultiply.toString();
              if ( multipleString.length > 1) {
                  multipleArray.unshift(multipleString[1]);
                  addNumber = parseInt(multipleString[0]);
              } else {
                  multipleArray.unshift(multipleString);
                  addNumber = 0;
              };
          };

          if ( addNumber > 0 ) {
              multipleArray.unshift(addNumber);
              addNumber = 0;
          };

          const stringMultiply = multipleArray.join('');
          resultArray.push(stringMultiply);
      };

      sumOfMultiply = sum(resultArray);
  };

  return sumOfMultiply;
};

function factorial(n)
{
  if(n<0)
    return ""
  else
    {
    let arr=[1]
    let carry=0
    for(let i=2;i<=n;i++)
    {
      for(let j=0;j<arr.length;j++)
      {
        let t=arr[j]*i
        arr[j]=(t+carry)%10
        carry=Math.floor((t+carry)/10)
      }
      while(carry!=0)
        {
        arr.push(carry%10)
        carry=Math.floor(carry/10)
        }
     }
    let s=arr.join("")
    let res=""
		for(let i=0;i<s.length;i++)
			res=s[i]+res
		return res
      }
}

function mult(a, b) {
  a = a.toString().split('').reverse();
  b = b.toString().split('').reverse();

  let result = [];

  for (let i = 0; i < a.length; ++i) {
    for (let j = 0; j < b.length; ++j) {
      let idx = i + j;
      result[idx] = a[i] * b[j] + (idx >= result.length ? 0 : result[idx]);

      if (result[idx] > 9) {
        result[idx + 1] = Math.floor(result[idx] / 10) + (idx + 1 >= result.length ? 0 : result[idx + 1]);
        result[idx] -= Math.floor(result[idx] / 10) * 10;
      }
    }
  }

  return result.reverse().join('');
}

const factorial = (s) => {
  if (Number(s) <= 0) return null;

  let result = "1"
  for (let i = 2; i <= Number(s); i++) {
    result = mult(String(i), result)
  }
  
  return result
}

function factorial(n){
  let ans="1";
  for(let i=0; i<n; i++){
    ans=(mul(String(i+1),ans))
  }
  return ans;
}

function mul(a,b){
  let ans=[]
  for(i=b.length-1;i>=0;i--){
    let temp="";
    let remain=0;
    for(j=a.length-1;j>=0;j--){
      temp=(a[j]*b[i]+remain)%10+temp;
      remain=Math.floor((a[j]*b[i]+remain)/10)
    }
    remain!=0?temp=remain+temp:null;
    for(k=0;k<b.length-i-1;k++){
      temp+="0";
    }
    ans.push(temp);
  }
  let sum="0";
    for(h=0;h<ans.length;h++){
      sum=add(sum,ans[h]);
    }
  return sum;
}
function add(a,b){
let max=a.length>b.length? a:b;
let ans="";
let remain=0;
for(i=0;i<max.length;i++){
  let one=a[a.length-1-i]==undefined? 0:Number(a[a.length-1-i]);
  let two=b[b.length-1-i]==undefined? 0:Number(b[b.length-1-i]);
  ans=(remain+one+two)%10+ans;
  remain=Math.floor((remain+one+two)/10);
}
remain==0?null:ans=remain+ans;
return ans
}

function factorial(n){
  if (n < 0) return null;
  if (n === 0) return "1";
  let digits = [1];
  for (let i = 2; i <= n; i++) {
    digits = multiply(digits, i);
  }
  const factorialResult = digits.reverse().join("");
  return factorialResult;
}
function multiply(digits, num) {
  let carry = 0;
  for (let i = 0; i < digits.length; i++) {
    const product = digits[i] * num + carry;
    digits[i] = product % 10;
    carry = Math.floor(product / 10);
  }
  while (carry > 0) {
    digits.push(carry % 10);
    carry = Math.floor(carry / 10);
  }
  return digits;
}

function factorial(n) {
  if (n === 0 || n === 1) {
    return '1';
  }

  let result = '1';
  for (let i = 2; i <= n; i++) {
    result = multiplyBigIntegers(result, i.toString());
  }

  return result;
}

function multiplyBigIntegers(a, b) {
  const num1 = a.split('').reverse();
  const num2 = b.split('').reverse();
  const product = Array(num1.length + num2.length).fill(0);

  for (let i = 0; i < num1.length; i++) {
    for (let j = 0; j < num2.length; j++) {
      product[i + j] += parseInt(num1[i]) * parseInt(num2[j]);
      product[i + j + 1] += Math.floor(product[i + j] / 10);
      product[i + j] %= 10;
    }
  }

  while (product.length > 1 && product[product.length - 1] === 0) {
    product.pop();
  }

  return product.reverse().join('');
}

function factorial(n) {
  let x = "1"
  let matrix = []

  const getAdditionArray = (arr) => {
      const cloneArray = [...arr]
      return cloneArray.reverse().map((number, i) => {
          const newNumber = number
          if(newNumber.toString().length > 1) {
              if(newNumber.toString().length === 3) {
                  cloneArray[i + 2] += +newNumber.toString().split("")[0]
                  cloneArray[i + 1] += +newNumber.toString().split("")[1]
                  return +newNumber.toString().split("")[2]
              } else {
                  cloneArray[i + 1] += +newNumber.toString().split("")[0]
                  return +newNumber.toString().split("")[1]
              }
          } else {
              return newNumber
          }
      })
  }
  for (let i = 2; i <= n; i++) {
      const y = i.toString()
      x.split('').forEach((number, u) => {
          let row = new Array(y.length + x.length).fill(0)
          for(let i = 0; i < y.length; i++) {
              const n = +number * y[y.length - 1 - i]
              const currentIndex = y.length + x.length - i - 1 - (x.length - 1 - u)
              row[currentIndex] += n
          }
          matrix.push(getAdditionArray(row).reverse())
      })
      const sumArr = new Array(y.length + x.length).fill(0)
      for(let k = matrix[0].length - 1; k >= 0 ; k--) {
          matrix.forEach((item, i) => {
              sumArr[k] += item[k]
          })
      }

      x = getAdditionArray(sumArr).reverse().join('').replace(/^0+/, '')

      if(x.length === 0 ) {
          return "0"
      }
      matrix = []
  }
  return x
}

function multiplyStrings(str1, str2) {
  const num1 = str1.split('').map(Number);
  const num2 = str2.split('').map(Number);
  const result = Array(num1.length + num2.length).fill(0);

  for (let i = num1.length - 1; i >= 0; i--) {
      for (let j = num2.length - 1; j >= 0; j--) {
          const product = num1[i] * num2[j] + result[i + j + 1];
          result[i + j + 1] = product % 10;
          result[i + j] += Math.floor(product / 10);
      }
  }

  return result.join('').replace(/^0+/, '');
}

function factorial(n) {
  if (n === 0 || n === 1) {
      return "1";
  } else {
      let ans = "1";
      for (let i = 2; i <= n; i++) {
          ans = multiplyStrings(ans, i.toString());
      }
      return ans;
  }
}

function multiplyArrays(arr1, arr2) {
  const result = new Array(arr1.length + arr2.length).fill(0);

  for (let i = arr1.length - 1; i >= 0; i--) {
    for (let j = arr2.length - 1; j >= 0; j--) {
      const product = arr1[i] * arr2[j];
      const position = i + j + 1;

      result[position] += product;
      result[position - 1] += Math.floor(result[position] / 10);
      result[position] %= 10;
    }
  }

  while (result.length > 1 && result[0] === 0) {
    result.shift();
  }

  return result;
}

function factorial(n) {
  if (isNaN(n) || !Number.isInteger(n) || n < 0) {
    return null;
  } else if (n === 0) {
    return [1];
  } else {
    let result = [1];

    for (let i = 2; i <= n; i++) {
      const multiplier = Array.from(String(i), Number); // Convert i to an array of digits
      result = multiplyArrays(result, multiplier);
    }

    return result.join('');
  }
}

function factorial(n) {
  // Add some code
  if (n <= 0) return null;
  let result = "1";
  function multiply(a, b) {
    if (a == "0" || b == "0") return "0";
    function valuePosition(string, counter) {
      if (counter > string.length - 1) return 0;
      return string.slice(string.length - 1 - counter, string.length - counter);
    }
    function convertion(x) {
      for (let i = 0; i < x.length; i++) {
        if (x[i] != "0") return x.slice(i, x.length);
      }
      return x;
    }
    let x = convertion(a);
    let y = convertion(b);
    let result = [];

    // Función Producto
    function product(string, char, k) {
      let result = "";
      let carry = 0;
      let product = 0;
      let m = parseInt(char);
      for (let i = string.length - 1; i >= 0; i--) {
        product = parseInt(string[i] * m + carry).toString();
        result = product.slice(-1) + result;
        if (product.length == 1) {
          carry = 0;
        } else {
          carry = parseInt(product.slice(0, product.length - 1));
        }
      }
      if (carry == 0) {
        result = result + "0".repeat(k);
      } else {
        result = carry + result + "0".repeat(k);
      }
      return result;
    }
    let count = 0;
    // Array de productos parciales

    for (let i = y.length - 1; i >= 0; i--) {
      result.unshift(product(x, y[i], count));
      count += 1;
    }
    // console.log(result);
    let sumPartial;
    let carry = 0;
    let resultProduct = "";

    for (let i = 0; i < result[0].length; i++) {
      sumPartial = carry;
      for (let j = 0; j < result.length; j++) {
        sumPartial += parseInt(valuePosition(result[j], i));
      }
      // console.log(sumPartial);
      resultProduct = sumPartial.toString().slice(-1) + resultProduct;
      if (sumPartial < 10) {
        carry = 0;
      } else {
        carry = Math.floor(sumPartial / 10);
      }
    }
    if (carry != 0) return carry + resultProduct;
    return resultProduct;
  }
  for (let i = 1; i <= n; i++) {
    result = multiply(result, i.toString());
  }
  return result;
}


function multiply(arr, num) {
  let carry = 0;
  for (let i = 0; i < arr.length; i++) {
    const product = arr[i] * num + carry;
    arr[i] = product % 10;
    carry = Math.floor(product / 10);
  }
  while (carry > 0) {
    arr.push(carry % 10);
    carry = Math.floor(carry / 10);
  }
}

function factorial(n) {
  if (n < 0) return '';

  const result = [1];
  for (let i = 2; i <= n; i++) {
    multiply(result, i);
  }

  return result.reverse().join('');
}

function factorial(n){
  if (n < 0) {
    return null;
  } else if (n === 0 || n === 1) {
    return "1";
  } else {
    let result = "1";
    for (let i = 2; i <= n; i++) {
      result = multiplyStrings(result, i.toString());
    }
    return result;
  }
}

function multiplyStrings(str1, str2) {
  const len1 = str1.length;
  const len2 = str2.length;
  const result = new Array(len1 + len2).fill(0);

  for (let i = len1 - 1; i >= 0; i--) {
    for (let j = len2 - 1; j >= 0; j--) {
      const product = Number(str1[i]) * Number(str2[j]);
      const sum = product + result[i + j + 1];
      result[i + j + 1] = sum % 10;
      result[i + j] += Math.floor(sum / 10);
    }
  }

  return result.join('').replace(/^0+/, '') || '0';
}

function factorial(n) {
  // Handle non-negative integers
  if (n < 0) {
      return null;
  }

  // Handle 0 and 1 as base cases
  if (n === 0 || n === 1) {
      return "1";
  }

  // Multiply numbers using strings to avoid precision issues
  let result = "1";
  for (let i = 2; i <= n; i++) {
      result = multiplyStrings(result, i.toString());
  }

  return result;
}

// Helper function to multiply two strings
function multiplyStrings(a, b) {
  const len1 = a.length;
  const len2 = b.length;
  const result = new Array(len1 + len2).fill(0);

  for (let i = len1 - 1; i >= 0; i--) {
      for (let j = len2 - 1; j >= 0; j--) {
          const product = parseInt(a[i]) * parseInt(b[j]);
          const sum = product + result[i + j + 1];

          result[i + j + 1] = sum % 10;
          result[i + j] += Math.floor(sum / 10);
      }
  }

  return result.join("").replace(/^0+/, ""); // Remove leading zeros
}

